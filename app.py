import streamlit as st
import time
import io
import base64
import re
from datetime import datetime
import pytz
import requests
import json
import pandas as pd
import numpy as np
from typing import Dict, Any
import yfinance as yf
import ta
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
st.set_page_config(
    page_title="üìä MAJORKA VIP",
    page_icon="üì±",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ Telegram –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
def load_telegram_mobile_css():
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@300;400;500;600;700&display=swap');

    * {
        box-sizing: border-box;
    }

    .main {
        font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
        background: #0f0f23;
        padding: 0 !important;
        margin: 0 !important;
        max-width: 100% !important;
    }

    .stApp {
        background: linear-gradient(180deg, #0f0f23 0%, #1a1a2e 100%);
        overflow-x: hidden;
    }

    .block-container {
        padding: 1rem 0.5rem !important;
        max-width: 100% !important;
    }

    /* Telegram-style header */
    .telegram-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 0 0 25px 25px;
        padding: 1.5rem 1rem;
        margin: -1rem -0.5rem 1rem -0.5rem;
        text-align: center;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .app-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: white;
        margin: 0;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    .app-subtitle {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
        margin: 0.3rem 0 0 0;
        font-weight: 400;
    }

    /* Telegram-style cards */
    .telegram-card {
        background: linear-gradient(145deg, #1e1e2e, #2a2a3e);
        border-radius: 18px;
        padding: 1.2rem;
        margin: 0.8rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(10px);
    }

    .signal-card {
        background: linear-gradient(145deg, #1a2332, #2d3748);
        border-radius: 20px;
        padding: 1.5rem;
        margin: 1rem 0;
        text-align: center;
        border: 2px solid;
        position: relative;
        overflow: hidden;
    }

    .signal-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #4CAF50, #8BC34A);
        border-radius: 20px 20px 0 0;
    }

    .signal-call {
        border-color: #4CAF50;
        background: linear-gradient(145deg, #1a2e1a, #2d4a2d);
    }

    .signal-call::before {
        background: linear-gradient(90deg, #4CAF50, #8BC34A);
    }

    .signal-put {
        border-color: #f44336;
        background: linear-gradient(145deg, #2e1a1a, #4a2d2d);
    }

    .signal-put::before {
        background: linear-gradient(90deg, #f44336, #ff5722);
    }

    .signal-wait {
        border-color: #ff9800;
        background: linear-gradient(145deg, #2e2a1a, #4a452d);
    }

    .signal-wait::before {
        background: linear-gradient(90deg, #ff9800, #ffc107);
    }

    /* –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram */
    .stButton > button {
        background: linear-gradient(45deg, #667eea, #764ba2) !important;
        color: white !important;
        border: none !important;
        border-radius: 15px !important;
        padding: 1rem 2rem !important;
        font-weight: 600 !important;
        font-size: 1rem !important;
        width: 100% !important;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4) !important;
        transition: all 0.3s ease !important;
        margin: 0.5rem 0 !important;
    }

    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6) !important;
    }

    /* –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram */
    .metric-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 0.8rem;
        margin: 1rem 0;
    }

    .metric-card {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e);
        border-radius: 15px;
        padding: 1rem;
        text-align: center;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .metric-value {
        font-size: 1.4rem;
        font-weight: 700;
        color: #667eea;
        margin: 0.3rem 0;
    }

    .metric-label {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .metric-change {
        font-size: 0.9rem;
        font-weight: 600;
        margin-top: 0.2rem;
    }

    .metric-change.positive { color: #4CAF50; }
    .metric-change.negative { color: #f44336; }

    /* –°–µ–ª–µ–∫—Ç—ã –∏ –∏–Ω–ø—É—Ç—ã */
    .stSelectbox > div > div {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 12px !important;
        color: white !important;
    }

    .stTextInput > div > div > input {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 12px !important;
        color: white !important;
    }

    /* –≠–∫—Å–ø–∞–Ω–¥–µ—Ä—ã */
    .streamlit-expanderHeader {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e) !important;
        border-radius: 12px !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        color: white !important;
    }

    .streamlit-expanderContent {
        background: rgba(30, 30, 46, 0.8) !important;
        border-radius: 0 0 12px 12px !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        border-top: none !important;
    }

    /* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */
    .progress-container {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 0.5rem;
        margin: 0.5rem 0;
    }

    .confidence-bar {
        height: 8px;
        border-radius: 6px;
        background: linear-gradient(90deg, #f44336 0%, #ff9800 50%, #4CAF50 100%);
        position: relative;
        margin: 0.5rem 0;
    }

    .confidence-indicator {
        position: absolute;
        top: -2px;
        width: 12px;
        height: 12px;
        background: white;
        border-radius: 50%;
        border: 2px solid #667eea;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    .pulse {
        animation: pulse 2s infinite;
    }

    @keyframes slideIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .slide-in {
        animation: slideIn 0.5s ease-out;
    }

    /* –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ */
    .history-item {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e);
        border-radius: 12px;
        padding: 0.8rem;
        margin: 0.5rem 0;
        border-left: 4px solid;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .history-call { border-left-color: #4CAF50; }
    .history-put { border-left-color: #f44336; }
    .history-wait { border-left-color: #ff9800; }

    /* –°–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit */
    #MainMenu { visibility: hidden; }
    footer { visibility: hidden; }
    header { visibility: hidden; }
    .stDeployButton { display: none; }

    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .metric-container {
            grid-template-columns: repeat(2, 1fr);
        }

        .app-title {
            font-size: 1.5rem;
        }

        .telegram-card {
            margin: 0.5rem 0;
            padding: 1rem;
        }
    }

    /* –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */
    .success-text { color: #4CAF50; font-weight: 600; }
    .error-text { color: #f44336; font-weight: 600; }
    .warning-text { color: #ff9800; font-weight: 600; }
    .info-text { color: #667eea; font-weight: 600; }

    /* –ò–∫–æ–Ω–∫–∏ –∏ —ç–º–æ–¥–∑–∏ */
    .icon-large { font-size: 2rem; margin: 0.5rem 0; }
    .icon-medium { font-size: 1.5rem; }
    .icon-small { font-size: 1rem; }

    /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
    .stPlotlyChart {
        background: transparent !important;
    }

    /* Telegram-style toggles */
    .stCheckbox > label {
        color: white !important;
        font-weight: 500 !important;
    }

    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        background: linear-gradient(180deg, #1e1e2e 0%, #2a2a3e 100%) !important;
    }

    .css-1d391kg .stSelectbox label {
        color: white !important;
    }
    </style>
    """, unsafe_allow_html=True)

def is_trading_time():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)

    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    hour = moscow_time.hour
    weekday = moscow_time.weekday()

    # –í—ã—Ö–æ–¥–Ω—ã–µ
    if weekday >= 5:  # –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return False, "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏"

    # –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
    if 2 <= hour <= 6:
        return False, "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞"

    # –í—Ä–µ–º—è –æ–±–µ–¥–∞ (–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
    if 13 <= hour <= 14:
        return False, "–û–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"

    # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    if (8 <= hour <= 12) or (15 <= hour <= 19):
        return True, "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"

    return True, "–û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è"

def get_market_volatility(df: pd.DataFrame) -> dict:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
    try:
        # ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        atr_14 = ta.volatility.AverageTrueRange(df['High'], df['Low'], df['Close'], window=14).average_true_range()
        current_atr = atr_14.iloc[-1]
        avg_atr = atr_14.tail(50).mean()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        price_std = df['Close'].tail(20).std()
        price_mean = df['Close'].tail(20).mean()
        cv = (price_std / price_mean) * 100 if price_mean > 0 else 0  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏

        # –†–∞–∑–º–∞—Ö —Ü–µ–Ω
        high_low_ratio = (df['High'].tail(10).max() - df['Low'].tail(10).min()) / df['Close'].iloc[-1]

        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility_ratio = current_atr / avg_atr if avg_atr > 0 else 1

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        normalized_volatility = (current_atr / df['Close'].iloc[-1]) * 100

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if volatility_ratio > 2.0 or normalized_volatility > 2.0:
            level = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"
            recommendation = "–ù–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å"
            risk_level = 5
        elif volatility_ratio > 1.5 or normalized_volatility > 1.2:
            level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
            recommendation = "–ö—Ä–∞–π–Ω–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"
            risk_level = 4
        elif volatility_ratio > 1.2 or normalized_volatility > 0.8:
            level = "–í—ã—Å–æ–∫–∞—è"
            recommendation = "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ"
            risk_level = 3
        elif volatility_ratio > 0.8 and normalized_volatility > 0.3:
            level = "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
            recommendation = "–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è"
            risk_level = 2
        elif volatility_ratio > 0.5:
            level = "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
            recommendation = "–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
            risk_level = 1
        else:
            level = "–ù–∏–∑–∫–∞—è"
            recommendation = "–°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
            risk_level = 3

        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        recent_atr = atr_14.tail(5).mean()
        older_atr = atr_14.tail(15).head(10).mean()
        volatility_trend = "–†–∞—Å—Ç–µ—Ç" if recent_atr > older_atr * 1.1 else "–ü–∞–¥–∞–µ—Ç" if recent_atr < older_atr * 0.9 else "–°—Ç–∞–±–∏–ª—å–Ω–∞—è"

        return {
            "level": level,
            "ratio": volatility_ratio,
            "normalized": normalized_volatility,
            "trade_recommendation": recommendation,
            "risk_level": risk_level,
            "trend": volatility_trend,
            "coefficient_variation": cv,
            "high_low_ratio": high_low_ratio * 100,
            "current_atr": current_atr,
            "avg_atr": avg_atr
        }
    except Exception as e:
        return {
            "level": "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞", 
            "ratio": 1, 
            "normalized": 0,
            "trade_recommendation": "–í–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è",
            "risk_level": 5,
            "trend": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "coefficient_variation": 0,
            "high_low_ratio": 0,
            "current_atr": 0.001,
            "avg_atr": 0.001
        }

def get_risk_warnings(indicators: dict, pair: str, timeframe: str) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö"""
    warnings = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    rsi = indicators.get('rsi', 50)
    macd = indicators.get('macd', 0)
    macd_signal = indicators.get('macd_signal', 0)
    bb_position = indicators.get('bb_position', 0.5)

    # –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –º–µ–∂–¥—É RSI –∏ MACD
    if (rsi > 70 and macd > macd_signal) or (rsi < 30 and macd < macd_signal):
        warnings.append("‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –º–µ–∂–¥—É RSI –∏ MACD")

    # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if rsi > 85 or rsi < 15:
        warnings.append("üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞")

    # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    atr = indicators.get('atr', 0)
    if atr < 0.0001:
        warnings.append("üò¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Å–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã")

    # –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    if 0.3 < bb_position < 0.7 and 40 < rsi < 60:
        warnings.append("‚ÜîÔ∏è –í–æ–∑–º–æ–∂–Ω–æ–µ –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")

    # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    if timeframe in ['1m', '3m']:
        warnings.append("‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏")

    return warnings

class PocketOptionAnalyzer:
    def __init__(self):
        self.gpt_api_key = None
        if 'openai_api_key' in st.session_state:
            self.gpt_api_key = st.session_state.openai_api_key

    def get_market_data(self, pair: str, timeframe: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ Yahoo Finance"""
        try:
            if "/" in pair:
                symbol = pair.replace("/", "") + "=X"
            else:
                symbol = pair

            period_map = {
                "1m": "1d", "3m": "5d", "5m": "5d", "15m": "5d",
                "30m": "1mo", "1h": "1mo", "4h": "3mo", "1d": "1y"
            }

            interval_map = {
                "1m": "1m", "3m": "5m", "5m": "5m", "15m": "15m",
                "30m": "30m", "1h": "1h", "4h": "1h", "1d": "1d"
            }

            period = period_map.get(timeframe, "1mo")
            interval = interval_map.get(timeframe, "1h")

            ticker = yf.Ticker(symbol)
            data = ticker.history(period=period, interval=interval)

            if data.empty:
                st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if data['Close'].isna().all() or len(data) < 20:
                st.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {pair}")
                return None

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            data = data.dropna()

            if len(data) < 20:
                st.warning(f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {pair}")
                return None

            return data

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return None

    def calculate_indicators(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        try:
            indicators = {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if len(df) < 50:
                st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

            # RSI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                rsi_indicator = ta.momentum.RSIIndicator(df['Close'])
                rsi_value = rsi_indicator.rsi().iloc[-1]
                indicators['rsi'] = rsi_value if not pd.isna(rsi_value) else 50
            except:
                indicators['rsi'] = 50

            # MACD —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                macd = ta.trend.MACD(df['Close'])
                macd_value = macd.macd().iloc[-1]
                macd_signal_value = macd.macd_signal().iloc[-1]
                macd_histogram_value = macd.macd_diff().iloc[-1]

                indicators['macd'] = macd_value if not pd.isna(macd_value) else 0
                indicators['macd_signal'] = macd_signal_value if not pd.isna(macd_signal_value) else 0
                indicators['macd_histogram'] = macd_histogram_value if not pd.isna(macd_histogram_value) else 0
            except:
                indicators['macd'] = 0
                indicators['macd_signal'] = 0
                indicators['macd_histogram'] = 0

            # Bollinger Bands —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                bb = ta.volatility.BollingerBands(df['Close'])
                bb_upper = bb.bollinger_hband().iloc[-1]
                bb_middle = bb.bollinger_mavg().iloc[-1]
                bb_lower = bb.bollinger_lband().iloc[-1]

                indicators['bb_upper'] = bb_upper if not pd.isna(bb_upper) else df['Close'].iloc[-1] * 1.02
                indicators['bb_middle'] = bb_middle if not pd.isna(bb_middle) else df['Close'].iloc[-1]
                indicators['bb_lower'] = bb_lower if not pd.isna(bb_lower) else df['Close'].iloc[-1] * 0.98

                # –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ BB
                if indicators['bb_upper'] != indicators['bb_lower']:
                    indicators['bb_position'] = (df['Close'].iloc[-1] - indicators['bb_lower']) / (indicators['bb_upper'] - indicators['bb_lower'])
                else:
                    indicators['bb_position'] = 0.5
            except:
                indicators['bb_upper'] = df['Close'].iloc[-1] * 1.02
                indicators['bb_middle'] = df['Close'].iloc[-1]
                indicators['bb_lower'] = df['Close'].iloc[-1] * 0.98
                indicators['bb_position'] = 0.5

            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                sma_20 = ta.trend.SMAIndicator(df['Close'], window=min(20, len(df)-1)).sma_indicator().iloc[-1]
                indicators['sma_20'] = sma_20 if not pd.isna(sma_20) else df['Close'].iloc[-1]
            except:
                indicators['sma_20'] = df['Close'].iloc[-1]

            try:
                if len(df) >= 50:
                    sma_50 = ta.trend.SMAIndicator(df['Close'], window=50).sma_indicator().iloc[-1]
                    indicators['sma_50'] = sma_50 if not pd.isna(sma_50) else df['Close'].iloc[-1]
                else:
                    indicators['sma_50'] = df['Close'].iloc[-1]
            except:
                indicators['sma_50'] = df['Close'].iloc[-1]

            try:
                ema_12 = ta.trend.EMAIndicator(df['Close'], window=min(12, len(df)-1)).ema_indicator().iloc[-1]
                indicators['ema_12'] = ema_12 if not pd.isna(ema_12) else df['Close'].iloc[-1]
            except:
                indicators['ema_12'] = df['Close'].iloc[-1]

            try:
                ema_26 = ta.trend.EMAIndicator(df['Close'], window=min(26, len(df)-1)).ema_indicator().iloc[-1]
                indicators['ema_26'] = ema_26 if not pd.isna(ema_26) else df['Close'].iloc[-1]
            except:
                indicators['ema_26'] = df['Close'].iloc[-1]

            # Stochastic —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                stoch = ta.momentum.StochasticOscillator(df['High'], df['Low'], df['Close'])
                stoch_k = stoch.stoch().iloc[-1]
                stoch_d = stoch.stoch_signal().iloc[-1]

                indicators['stoch_k'] = stoch_k if not pd.isna(stoch_k) else 50
                indicators['stoch_d'] = stoch_d if not pd.isna(stoch_d) else 50
            except:
                indicators['stoch_k'] = 50
                indicators['stoch_d'] = 50

            # ATR —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                atr = ta.volatility.AverageTrueRange(df['High'], df['Low'], df['Close']).average_true_range().iloc[-1]
                indicators['atr'] = atr if not pd.isna(atr) else 0.001
            except:
                indicators['atr'] = 0.001

            # Williams %R —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                williams_r = ta.momentum.WilliamsRIndicator(df['High'], df['Low'], df['Close']).williams_r().iloc[-1]
                indicators['williams_r'] = williams_r if not pd.isna(williams_r) else -50
            except:
                indicators['williams_r'] = -50

            # CCI (Commodity Channel Index)
            try:
                cci = ta.trend.CCIIndicator(df['High'], df['Low'], df['Close']).cci().iloc[-1]
                indicators['cci'] = cci if not pd.isna(cci) else 0
            except:
                indicators['cci'] = 0

            # MFI (Money Flow Index)
            try:
                if 'Volume' in df.columns and not df['Volume'].isna().all():
                    mfi = ta.volume.MFIIndicator(df['High'], df['Low'], df['Close'], df['Volume']).money_flow_index().iloc[-1]
                    indicators['mfi'] = mfi if not pd.isna(mfi) else 50
                else:
                    indicators['mfi'] = 50
            except:
                indicators['mfi'] = 50

            # Ultimate Oscillator
            try:
                uo = ta.momentum.UltimateOscillator(df['High'], df['Low'], df['Close']).ultimate_oscillator().iloc[-1]
                indicators['ultimate_oscillator'] = uo if not pd.isna(uo) else 50
            except:
                indicators['ultimate_oscillator'] = 50

            # TRIX
            try:
                trix = ta.trend.TRIXIndicator(df['Close']).trix().iloc[-1]
                indicators['trix'] = trix if not pd.isna(trix) else 0
            except:
                indicators['trix'] = 0

            # Aroon
            try:
                aroon = ta.trend.AroonIndicator(df['High'], df['Low'])
                aroon_up = aroon.aroon_up().iloc[-1]
                aroon_down = aroon.aroon_down().iloc[-1]
                indicators['aroon_up'] = aroon_up if not pd.isna(aroon_up) else 50
                indicators['aroon_down'] = aroon_down if not pd.isna(aroon_down) else 50
            except:
                indicators['aroon_up'] = 50
                indicators['aroon_down'] = 50

            # Volume indicators (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–º)
            if 'Volume' in df.columns and not df['Volume'].isna().all():
                try:
                    volume_sma = df['Volume'].rolling(window=min(20, len(df))).mean().iloc[-1]
                    indicators['volume_sma'] = volume_sma if not pd.isna(volume_sma) else 0
                except:
                    indicators['volume_sma'] = 0

            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            indicators['current_price'] = df['Close'].iloc[-1]
            try:
                if len(df) > 1:
                    price_change = ((df['Close'].iloc[-1] - df['Close'].iloc[-2]) / df['Close'].iloc[-2]) * 100
                    indicators['price_change'] = price_change if not pd.isna(price_change) else 0
                else:
                    indicators['price_change'] = 0
            except:
                indicators['price_change'] = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            required_indicators = ['rsi', 'macd', 'macd_signal', 'bb_position', 'sma_20', 'stoch_k', 'williams_r', 'current_price']
            for indicator in required_indicators:
                if indicator not in indicators or pd.isna(indicators[indicator]):
                    st.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {indicator}")

            return indicators

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                'rsi': 50,
                'macd': 0,
                'macd_signal': 0,
                'macd_histogram': 0,
                'bb_upper': 0,
                'bb_middle': 0,
                'bb_lower': 0,
                'bb_position': 0.5,
                'sma_20': 0,
                'sma_50': 0,
                'ema_12': 0,
                'ema_26': 0,
                'stoch_k': 50,
                'stoch_d': 50,
                'atr': 0.001,
                'williams_r': -50,
                'current_price': 0,
                'price_change': 0
            }

    def analyze_with_ai(self, market_data: pd.DataFrame, indicators: Dict[str, Any], pair: str, timeframe: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        if not self.gpt_api_key or not self.gpt_api_key.startswith('sk-'):
            return self.telegram_analysis(indicators, pair, timeframe)

        try:
            recent_prices = market_data['Close'].tail(10).tolist()
            highs = market_data['High'].tail(5).tolist()
            lows = market_data['Low'].tail(5).tolist()

            moscow_tz = pytz.timezone('Europe/Moscow')
            moscow_time = datetime.now(moscow_tz)

            current_price = indicators.get('current_price', 0)
            price_change = indicators.get('price_change', 0)
            rsi = indicators.get('rsi', 0)
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            bb_position = indicators.get('bb_position', 0)
            sma_20 = indicators.get('sma_20', 0)

            prompt = f"""
            –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å 15+ –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ –≤ —Å—Ç–∏–ª–µ Telegram –±–æ—Ç–∞.
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair} –Ω–∞ {timeframe} –∏ –¥–∞–π –ß–ï–¢–ö–ò–ô —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.

            –î–ê–ù–ù–´–ï ({moscow_time.strftime('%H:%M:%S MSK')}):
            - –ü–∞—Ä–∞: {pair} | –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}
            - –¶–µ–Ω–∞: {current_price:.5f} ({price_change:+.2f}%)
            - RSI: {rsi:.1f} | MACD: {macd:.5f}
            - BB –ø–æ–∑–∏—Ü–∏—è: {bb_position:.2f} | SMA20: {sma_20:.5f}

            –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
            1. –î–∞–π –ß–ï–¢–ö–ò–ô —Å–∏–≥–Ω–∞–ª: üü¢ CALL –∏–ª–∏ üî¥ PUT –∏–ª–∏ ‚ö™ –ñ–î–ê–¢–¨
            2. –£–∫–∞–∂–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 1-10
            3. –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏: 1-5 –º–∏–Ω—É—Ç
            4. –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

            –§–û–†–ú–ê–¢ (—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è):
            üéØ –°–ò–ì–ù–ê–õ: [CALL/PUT/–ñ–î–ê–¢–¨]
üìä –£–í–ï–†–ï–ù–ù–û–°–¢–¨: [X/10]
‚è∞ –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: [X –º–∏–Ω]
üí° –ü–†–ò–ß–ò–ù–ê: [–∫—Ä–∞—Ç–∫–æ]
            """

            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.gpt_api_key}"
            }

            payload = {
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤. –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã."},
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 500,
                "temperature": 0.2
            }

            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )

            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                return self.telegram_analysis(indicators, pair, timeframe)

        except Exception as e:
            return self.telegram_analysis(indicators, pair, timeframe)

    def telegram_analysis(self, indicators: Dict[str, Any], pair: str, timeframe: str) -> str:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = indicators.get('rsi', 50)
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            bb_position = indicators.get('bb_position', 0.5)
            current_price = indicators.get('current_price', 0)
            sma_20 = indicators.get('sma_20', 0)
            sma_50 = indicators.get('sma_50', 0)
            ema_12 = indicators.get('ema_12', 0)
            ema_26 = indicators.get('ema_26', 0)
            stoch_k = indicators.get('stoch_k', 50)
            stoch_d = indicators.get('stoch_d', 50)
            williams_r = indicators.get('williams_r', -50)
            cci = indicators.get('cci', 0)
            mfi = indicators.get('mfi', 50)
            uo = indicators.get('ultimate_oscillator', 50)
            aroon_up = indicators.get('aroon_up', 50)
            aroon_down = indicators.get('aroon_down', 50)
            trix = indicators.get('trix', 0)
            atr = indicators.get('atr', 0.001)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è
            trading_allowed, time_message = is_trading_time()
            if not trading_allowed:
                return f"""üéØ –°–ò–ì–ù–ê–õ: –ñ–î–ê–¢–¨
üìä –£–í–ï–†–ï–ù–ù–û–°–¢–¨: 1/10
‚è∞ –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: 5 –º–∏–Ω
üí° –ü–†–ò–ß–ò–ù–ê: {time_message}"""

            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 1: –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            pattern_signals = self.analyze_chart_patterns(indicators)
            
            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 2: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä—ã–Ω–∫–∞
            psychology_signals = self.analyze_market_psychology(indicators, pair)
            
            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 3: –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_resistance_signals = self.analyze_support_resistance(indicators, current_price)
            
            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 4: –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
            institutional_signals = self.analyze_institutional_flows(indicators, pair, timeframe)
            
            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 5: –ú–µ–∂—Ä—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlation_signals = self.analyze_market_correlations(pair, timeframe)
            
            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 6: –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            fundamental_signals = self.analyze_fundamental_factors(pair, timeframe)
            
            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 7: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã
            time_cycle_signals = self.analyze_time_cycles(timeframe)
            
            # üß† –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 8: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            sentiment_signals = self.analyze_global_sentiment(pair)

            # üéØ –°–ò–°–¢–ï–ú–ê –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø–ú–ò
            call_score = 0
            put_score = 0
            signal_reasons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
            call_score += pattern_signals.get('call_strength', 0)
            put_score += pattern_signals.get('put_strength', 0)
            if pattern_signals.get('reason'):
                signal_reasons.append(pattern_signals['reason'])
                
            call_score += psychology_signals.get('call_strength', 0) 
            put_score += psychology_signals.get('put_strength', 0)
            if psychology_signals.get('reason'):
                signal_reasons.append(psychology_signals['reason'])
                
            call_score += support_resistance_signals.get('call_strength', 0)
            put_score += support_resistance_signals.get('put_strength', 0)
            if support_resistance_signals.get('reason'):
                signal_reasons.append(support_resistance_signals['reason'])
                
            call_score += institutional_signals.get('call_strength', 0)
            put_score += institutional_signals.get('put_strength', 0)
            if institutional_signals.get('reason'):
                signal_reasons.append(institutional_signals['reason'])
                
            call_score += correlation_signals.get('call_strength', 0)
            put_score += correlation_signals.get('put_strength', 0)
            if correlation_signals.get('reason'):
                signal_reasons.append(correlation_signals['reason'])
                
            call_score += fundamental_signals.get('call_strength', 0)
            put_score += fundamental_signals.get('put_strength', 0)
            if fundamental_signals.get('reason'):
                signal_reasons.append(fundamental_signals['reason'])
                
            call_score += time_cycle_signals.get('call_strength', 0)
            put_score += time_cycle_signals.get('put_strength', 0)
            if time_cycle_signals.get('reason'):
                signal_reasons.append(time_cycle_signals['reason'])
                
            call_score += sentiment_signals.get('call_strength', 0)
            put_score += sentiment_signals.get('put_strength', 0) 
            if sentiment_signals.get('reason'):
                signal_reasons.append(sentiment_signals['reason'])

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä
            volatility_multiplier = self.calculate_dynamic_volatility(atr, current_price, timeframe)
            market_regime = self.detect_market_regime(indicators)

            # –°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤–µ—Å–æ–≤
            ml_weights = self.calculate_ml_weights(indicators, pair, timeframe)

            # –ù–ï–ô–†–û–°–ï–¢–ï–í–û–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 1: –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            # Stochastic —Å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            stoch_signal_strength = self.calculate_stochastic_neural_score(stoch_k, stoch_d, market_regime)
            stoch_weight = ml_weights['stochastic'] * volatility_multiplier

            if stoch_signal_strength > 0.7:  # –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π
                call_score += stoch_weight * stoch_signal_strength
                signal_reasons.append(f"Stochastic –Ω–µ–π—Ä–æ—Å–∏–≥–Ω–∞–ª: {stoch_signal_strength:.2f}")
            elif stoch_signal_strength < -0.7:  # –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π
                put_score += stoch_weight * abs(stoch_signal_strength)
                signal_reasons.append(f"Stochastic –º–µ–¥–≤–µ–∂–∏–π: {abs(stoch_signal_strength):.2f}")
            elif stoch_signal_strength > 0.3:
                call_score += stoch_weight * 0.6
                signal_reasons.append("Stochastic —É–º–µ—Ä–µ–Ω–Ω–æ –±—ã—á–∏–π")
            elif stoch_signal_strength < -0.3:
                put_score += stoch_weight * 0.6
                signal_reasons.append("Stochastic —É–º–µ—Ä–µ–Ω–Ω–æ –º–µ–¥–≤–µ–∂–∏–π")

            # Williams %R —Å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            williams_signal = self.calculate_williams_neural_score(williams_r, market_regime)
            williams_weight = ml_weights['williams'] * volatility_multiplier

            if abs(williams_signal) > 0.7:
                if williams_signal > 0:
                    call_score += williams_weight * williams_signal
                    signal_reasons.append(f"Williams —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π: {williams_signal:.2f}")
                else:
                    put_score += williams_weight * abs(williams_signal)
                    signal_reasons.append(f"Williams —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π: {abs(williams_signal):.2f}")
            elif abs(williams_signal) > 0.3:
                if williams_signal > 0:
                    call_score += williams_weight * 0.6
                    signal_reasons.append("Williams —É–º–µ—Ä–µ–Ω–Ω–æ –±—ã—á–∏–π")
                else:
                    put_score += williams_weight * 0.6
                    signal_reasons.append("Williams —É–º–µ—Ä–µ–Ω–Ω–æ –º–µ–¥–≤–µ–∂–∏–π")

            # –ù–ï–ô–†–û–°–ï–¢–ï–í–û–ô –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–Ø 2: RSI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
            rsi_signal = self.calculate_rsi_neural_score(rsi, market_regime, bb_position)
            rsi_weight = ml_weights['rsi'] * volatility_multiplier

            if abs(rsi_signal) > 0.8:
                if rsi_signal > 0:
                    call_score += rsi_weight * rsi_signal
                    signal_reasons.append(f"RSI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±—ã—á–∏–π: {rsi_signal:.2f}")
                else:
                    put_score += rsi_weight * abs(rsi_signal)
                    signal_reasons.append(f"RSI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–µ–¥–≤–µ–∂–∏–π: {abs(rsi_signal):.2f}")
            elif abs(rsi_signal) > 0.5:
                if rsi_signal > 0:
                    call_score += rsi_weight * 0.7
                    signal_reasons.append("RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
                else:
                    put_score += rsi_weight * 0.7
                    signal_reasons.append("RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # CCI —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
            if cci < -150:
                call_score += 3
                signal_reasons.append("CCI —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif cci > 150:
                put_score += 3
                signal_reasons.append("CCI —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
            elif cci < -100:
                call_score += 2
                signal_reasons.append("CCI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif cci > 100:
                put_score += 2
                signal_reasons.append("CCI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # Tier 3: –°—Ä–µ–¥–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≤–µ—Å 2-2.5)
            # MFI (Money Flow Index)
            if mfi < 15:
                call_score += 2.5
                signal_reasons.append("MFI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π")
            elif mfi > 85:
                put_score += 2.5
                signal_reasons.append("MFI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π")
            elif mfi < 25:
                call_score += 2
                signal_reasons.append("MFI –Ω–∏–∑–∫–∏–π")
            elif mfi > 75:
                put_score += 2
                signal_reasons.append("MFI –≤—ã—Å–æ–∫–∏–π")

            # Aroon —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            aroon_diff = aroon_up - aroon_down
            if aroon_up > 80 and aroon_down < 20:
                call_score += 2.5
                signal_reasons.append("Aroon —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π")
            elif aroon_down > 80 and aroon_up < 20:
                put_score += 2.5
                signal_reasons.append("Aroon —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π")
            elif aroon_diff > 30:
                call_score += 1.5
                signal_reasons.append("Aroon –±—ã—á–∏–π")
            elif aroon_diff < -30:
                put_score += 1.5
                signal_reasons.append("Aroon –º–µ–¥–≤–µ–∂–∏–π")

            # Ultimate Oscillator
            if uo < 25:
                call_score += 2
                signal_reasons.append("UO —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif uo > 75:
                put_score += 2
                signal_reasons.append("UO —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
            elif uo < 35:
                call_score += 1
                signal_reasons.append("UO –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif uo > 65:
                put_score += 1
                signal_reasons.append("UO –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # Tier 4: –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≤–µ—Å 1.5-2)
            # Bollinger Bands —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            if bb_position < 0.1:
                call_score += 2
                signal_reasons.append("—Ü–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ –≤ BB")
            elif bb_position > 0.9:
                put_score += 2
                signal_reasons.append("—Ü–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ –≤ BB")
            elif bb_position < 0.25:
                call_score += 1.5
                signal_reasons.append("—Ü–µ–Ω–∞ —É –Ω–∏–∑–∞ BB")
            elif bb_position > 0.75:
                put_score += 1.5
                signal_reasons.append("—Ü–µ–Ω–∞ —É –≤–µ—Ä—Ö–∞ BB")

            # MACD —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            macd_diff = abs(macd - macd_signal)
            if macd > macd_signal and macd_diff > 0.0002:
                call_score += 2
                signal_reasons.append("MACD —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π")
            elif macd < macd_signal and macd_diff > 0.0002:
                put_score += 2
                signal_reasons.append("MACD —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π")
            elif macd > macd_signal and macd_diff > 0.0001:
                call_score += 1
                signal_reasons.append("MACD –±—ã—á–∏–π")
            elif macd < macd_signal and macd_diff > 0.0001:
                put_score += 1
                signal_reasons.append("MACD –º–µ–¥–≤–µ–∂–∏–π")

            # –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ MA
            trend_score = 0
            if current_price > sma_20 > sma_50:
                trend_score += 2
                call_score += 1.5
                signal_reasons.append("—Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            elif current_price < sma_20 < sma_50:
                trend_score -= 2
                put_score += 1.5
                signal_reasons.append("—Å–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            elif current_price > sma_20:
                call_score += 1
                signal_reasons.append("–≤—ã—à–µ SMA20")
            else:
                put_score += 1
                signal_reasons.append("–Ω–∏–∂–µ SMA20")

            # EMA –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
            if ema_12 > ema_26:
                call_score += 1
            else:
                put_score += 1

            # TRIX –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if abs(trix) > 0.0001:
                if trix > 0:
                    call_score += 0.5
                else:
                    put_score += 0.5

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π
            signal_type, confidence, neural_reason = self.calculate_final_neural_decision(
                call_score, put_score, indicators, market_regime
            )

            # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–∫–∞–∫ —É –æ–ø—ã—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞)
            if signal_type != "–ñ–î–ê–¢–¨":
                confidence = max(6, confidence)  # –ú–∏–Ω–∏–º—É–º 6 –¥–ª—è –ª—é–±–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Å–º—è–≥—á–µ–Ω–Ω—ã–µ)
            if signal_type != "–ñ–î–ê–¢–¨":
                # –§–∏–ª—å—Ç—Ä –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π)
                contradiction_score = self.calculate_contradiction_penalty(indicators)
                if contradiction_score > 0.9:  # –£–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ 0.9
                    confidence = max(4, confidence - 1)  # –ú–µ–Ω—å—à–µ —à—Ç—Ä–∞—Ñ–∞
                    signal_reasons.append("–Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è")

                # –§–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π)
                time_consistency = self.calculate_time_consistency(indicators, timeframe)
                confidence = max(4, int(confidence * max(0.9, time_consistency)))  # –ú–∏–Ω–∏–º—É–º 90% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π

                # –£–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                if confidence < 3 and signal_type != "–ñ–î–ê–¢–¨":
                    confidence = 3  # –ù–µ –º–µ–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª, —Ç–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—Å–º—è–≥—á–µ–Ω–Ω—ã–µ)
            total_score = call_score + put_score
            
            # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
            if total_score > 0:
                consensus = max(call_score, put_score) / total_score
                if consensus > 0.8:  # –í—ã—Å–æ–∫–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
                    confidence = min(10, confidence + 2)
                elif consensus > 0.7:  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
                    confidence = min(10, confidence + 1)
                elif consensus < 0.55:  # –ù–∏–∑–∫–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
                    confidence = max(3, confidence - 1)

            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã)
            if volatility_multiplier > 2.0:
                confidence = max(3, confidence - 2)
                signal_reasons.append("—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            elif volatility_multiplier > 1.5:
                confidence = max(4, confidence - 1)
                signal_reasons.append("–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            elif volatility_multiplier < 0.5:
                confidence = max(3, confidence - 1)
                signal_reasons.append("–æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
            contradiction_penalty = 0
            if (rsi > 70 and bb_position < 0.3) or (rsi < 30 and bb_position > 0.7):
                contradiction_penalty += 1
            if (stoch_k > 80 and williams_r < -80) or (stoch_k < 20 and williams_r > -20):
                contradiction_penalty += 1

            if contradiction_penalty > 0:
                confidence = max(1, confidence - contradiction_penalty)
                signal_reasons.append("–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if timeframe in ['1m', '3m']:
                expiration = "2" if volatility_multiplier > 1.2 else "3"
            elif timeframe in ['5m', '15m']:
                expiration = "3" if volatility_multiplier > 1.2 else "4"
            else:
                expiration = "5"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω
            main_reasons = signal_reasons[:3] if signal_reasons else ["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"]
            reason = ", ".join(main_reasons)

            return f"""üéØ –°–ò–ì–ù–ê–õ: {signal_type}
üìä –£–í–ï–†–ï–ù–ù–û–°–¢–¨: {confidence}/10
‚è∞ –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: {expiration} –º–∏–Ω
üí° –ü–†–ò–ß–ò–ù–ê: {reason}
üî• –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: {volatility_multiplier:.1f}x"""

        except Exception as e:
            return f"""üéØ –°–ò–ì–ù–ê–õ: –ñ–î–ê–¢–¨
üìä –£–í–ï–†–ï–ù–ù–û–°–¢–¨: 1/10
‚è∞ –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: 5 –º–∏–Ω
üí° –ü–†–ò–ß–ò–ù–ê: —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞"""

    def calculate_dynamic_volatility(self, atr: float, price: float, timeframe: str) -> float:
        """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞"""
        try:
            if price <= 0:
                return 1.0

            # –ë–∞–∑–æ–≤—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            tf_multipliers = {
                '1m': 1.5, '3m': 1.3, '5m': 1.2, 
                '15m': 1.1, '30m': 1.0, '1h': 0.9
            }

            base_mult = tf_multipliers.get(timeframe, 1.0)
            volatility_ratio = atr / (price * 0.005)  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
            dynamic_mult = base_mult * (1 + np.log(1 + volatility_ratio))
            return min(3.0, max(0.3, dynamic_mult))
        except:
            return 1.0

    def detect_market_regime(self, indicators: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ç—Ä–µ–Ω–¥/—Ñ–ª–µ—Ç/—Ä–∞–∑–≤–æ—Ä–æ—Ç)"""
        try:
            rsi = indicators.get('rsi', 50)
            bb_position = indicators.get('bb_position', 0.5)
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            aroon_up = indicators.get('aroon_up', 50)
            aroon_down = indicators.get('aroon_down', 50)

            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
            trend_strength = abs(aroon_up - aroon_down)
            momentum_strength = abs(macd - macd_signal) * 100000
            volatility_level = abs(bb_position - 0.5) * 2

            if trend_strength > 60 and momentum_strength > 2:
                return "–°–ò–õ–¨–ù–´–ô_–¢–†–ï–ù–î"
            elif trend_strength > 30:
                return "–°–õ–ê–ë–´–ô_–¢–†–ï–ù–î"  
            elif volatility_level < 0.3 and 40 < rsi < 60:
                return "–§–õ–ï–¢"
            elif (rsi > 75 or rsi < 25) and momentum_strength > 1:
                return "–†–ê–ó–í–û–†–û–¢"
            else:
                return "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨"
        except:
            return "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨"

    def calculate_ml_weights(self, indicators: Dict[str, Any], pair: str, timeframe: str) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞ (–æ–±—É—á–µ–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
            base_weights = {
                'rsi': 2.5,
                'stochastic': 3.0,
                'williams': 2.8,
                'macd': 2.2,
                'bollinger': 2.0,
                'cci': 1.8,
                'mfi': 1.5,
                'aroon': 1.7,
                'ultimate': 1.3
            }

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –≤–µ—Å–æ–≤ –ø–æ–¥ —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
            market_regime = self.detect_market_regime(indicators)
            volatility = indicators.get('atr', 0.001)

            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
            if market_regime == "–°–ò–õ–¨–ù–´–ô_–¢–†–ï–ù–î":
                base_weights['macd'] *= 1.5
                base_weights['aroon'] *= 1.4
                base_weights['rsi'] *= 0.8  # RSI –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –≤ —Ç—Ä–µ–Ω–¥–∞—Ö
            elif market_regime == "–§–õ–ï–¢":
                base_weights['bollinger'] *= 1.6
                base_weights['rsi'] *= 1.3
                base_weights['stochastic'] *= 1.3
            elif market_regime == "–†–ê–ó–í–û–†–û–¢":
                base_weights['rsi'] *= 1.8
                base_weights['williams'] *= 1.6
                base_weights['stochastic'] *= 1.5

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            vol_multiplier = min(1.5, max(0.7, volatility * 100000))
            for key in base_weights:
                base_weights[key] *= vol_multiplier

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
            pair_adjustments = {
                'EUR/USD': {'rsi': 1.1, 'macd': 1.2},
                'GBP/USD': {'bollinger': 1.2, 'volatility': 1.1},
                'USD/JPY': {'aroon': 1.2, 'cci': 1.1},
                'AUD/USD': {'williams': 1.1, 'mfi': 1.2}
            }

            if pair in pair_adjustments:
                for indicator, mult in pair_adjustments[pair].items():
                    if indicator in base_weights:
                        base_weights[indicator] *= mult

            return base_weights
        except:
            return {
                'rsi': 2.0, 'stochastic': 2.5, 'williams': 2.3,
                'macd': 2.0, 'bollinger': 1.8, 'cci': 1.5,
                'mfi': 1.3, 'aroon': 1.5, 'ultimate': 1.2
            }

    def calculate_stochastic_neural_score(self, stoch_k: float, stoch_d: float, market_regime: str) -> float:
        """–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ Stochastic —Å —É—á–µ—Ç–æ–º —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            if stoch_k < 15 and stoch_d < 20:
                base_signal = 0.9  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π
            elif stoch_k > 85 and stoch_d > 80:
                base_signal = -0.9  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π
            elif stoch_k < 25:
                base_signal = 0.6
            elif stoch_k > 75:
                base_signal = -0.6
            elif stoch_k < 35:
                base_signal = 0.3
            elif stoch_k > 65:
                base_signal = -0.3
            else:
                base_signal = 0.0

            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥ —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            if market_regime == "–°–ò–õ–¨–ù–´–ô_–¢–†–ï–ù–î":
                # –í —Ç—Ä–µ–Ω–¥–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã
                base_signal *= 0.7
            elif market_regime == "–§–õ–ï–¢":
                # –í —Ñ–ª–µ—Ç–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã
                base_signal *= 1.3
            elif market_regime == "–†–ê–ó–í–û–†–û–¢":
                # –ü—Ä–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
                base_signal *= 1.5

            # –£—á–µ—Ç –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –º–µ–∂–¥—É %K –∏ %D
            divergence = abs(stoch_k - stoch_d)
            if divergence > 10:
                base_signal *= 1.2  # –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª

            return max(-1.0, min(1.0, base_signal))
        except:
            return 0.0

    def calculate_rsi_neural_score(self, rsi: float, market_regime: str, bb_position: float) -> float:
        """–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ RSI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            # –ë–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª RSI
            if rsi < 20:
                base_signal = 0.95
            elif rsi > 80:
                base_signal = -0.95
            elif rsi < 30:
                base_signal = 0.7
            elif rsi > 70:
                base_signal = -0.7
            elif rsi < 40:
                base_signal = 0.3
            elif rsi > 60:
                base_signal = -0.3
            else:
                base_signal = 0.0

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
            if market_regime == "–°–ò–õ–¨–ù–´–ô_–¢–†–ï–ù–î":
                # –í —Å–∏–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ RSI –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö
                if abs(base_signal) > 0.7:
                    base_signal *= 0.6

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç Bollinger Bands
            if (base_signal > 0 and bb_position < 0.3) or (base_signal < 0 and bb_position > 0.7):
                base_signal *= 1.3  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª
            elif (base_signal > 0 and bb_position > 0.7) or (base_signal < 0 and bb_position < 0.3):
                base_signal *= 0.5  # –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –æ—Å–ª–∞–±–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª

            return max(-1.0, min(1.0, base_signal))
        except:
            return 0.0

    def calculate_macd_neural_score(self, macd: float, macd_signal: float, market_regime: str) -> float:
        """–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ MACD"""
        try:
            macd_diff = macd - macd_signal

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            if abs(macd_diff) > 0.0005:
                strength = 0.9
            elif abs(macd_diff) > 0.0003:
                strength = 0.7
            elif abs(macd_diff) > 0.0001:
                strength = 0.5
            else:
                strength = 0.2

            signal = strength if macd_diff > 0 else -strength

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            if market_regime == "–°–ò–õ–¨–ù–´–ô_–¢–†–ï–ù–î":
                signal *= 1.4  # MACD –æ—á–µ–Ω—å —Ç–æ—á–µ–Ω –≤ —Ç—Ä–µ–Ω–¥–∞—Ö
            elif market_regime == "–§–õ–ï–¢":
                signal *= 0.6  # –ú–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –≤ —Ñ–ª–µ—Ç–µ

            return max(-1.0, min(1.0, signal))
        except:
            return 0.0

    def calculate_pattern_recognition_score(self, indicators: Dict[str, Any]) -> float:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        try:
            patterns_score = 0

            # –ü–∞—Ç—Ç–µ—Ä–Ω "–¢—Ä–æ–π–Ω–æ–µ –¥–Ω–æ"
            rsi = indicators.get('rsi', 50)
            bb_position = indicators.get('bb_position', 0.5)
            williams_r = indicators.get('williams_r', -50)

            if (rsi < 25 and bb_position < 0.2 and williams_r < -85):
                patterns_score += 0.8  # –°–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–≤–µ—Ä—Ö

            # –ü–∞—Ç—Ç–µ—Ä–Ω "–¢—Ä–æ–π–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞"
            elif (rsi > 75 and bb_position > 0.8 and williams_r > -15):
                patterns_score -= 0.8  # –°–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–Ω–∏–∑

            # –ü–∞—Ç—Ç–µ—Ä–Ω "–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ RSI-MACD"
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)

            if (rsi < 30 and macd > macd_signal):
                patterns_score += 0.6  # –ë—ã—á—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            elif (rsi > 70 and macd < macd_signal):
                patterns_score -= 0.6  # –ú–µ–¥–≤–µ–∂—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è

            return max(-1.0, min(1.0, patterns_score))
        except:
            return 0.0

    def calculate_williams_neural_score(self, williams_r: float, market_regime: str) -> float:
        """–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ Williams %R"""
        try:
            if williams_r < -90:
                base_signal = 0.95
            elif williams_r > -10:
                base_signal = -0.95
            elif williams_r < -80:
                base_signal = 0.7
            elif williams_r > -20:
                base_signal = -0.7
            elif williams_r < -70:
                base_signal = 0.4
            elif williams_r > -30:
                base_signal = -0.4
            else:
                base_signal = 0.0

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            if market_regime == "–†–ê–ó–í–û–†–û–¢":
                base_signal *= 1.4
            elif market_regime == "–§–õ–ï–¢":
                base_signal *= 1.2
            elif market_regime == "–°–ò–õ–¨–ù–´–ô_–¢–†–ï–ù–î":
                base_signal *= 0.8

            return max(-1.0, min(1.0, base_signal))
        except:
            return 0.0

    def calculate_final_neural_decision(self, call_score: float, put_score: float, 
                                      indicators: Dict[str, Any], market_regime: str) -> tuple:
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω-–∞–Ω–∞–ª–∏–∑
            pattern_score = self.calculate_pattern_recognition_score(indicators)

            if pattern_score > 0.5:
                call_score += pattern_score * 2
            elif pattern_score < -0.5:
                put_score += abs(pattern_score) * 2

            # –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            total_score = call_score + put_score

            if total_score == 0:
                return "–ñ–î–ê–¢–¨", 4, "–Ω–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"

            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
            confidence_multiplier = {
                "–°–ò–õ–¨–ù–´–ô_–¢–†–ï–ù–î": 1.5,
                "–°–õ–ê–ë–´–ô_–¢–†–ï–ù–î": 1.2,
                "–§–õ–ï–¢": 1.3,
                "–†–ê–ó–í–û–†–û–¢": 1.6,
                "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨": 1.0  # –ü–æ–≤—ã—à–µ–Ω —Å 0.7
            }

            mult = confidence_multiplier.get(market_regime, 1.0)

            if call_score > put_score:
                score_diff = call_score - put_score
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 6 + score_diff
                base_confidence = 6 + min(3, score_diff)
                confidence = min(10, int(base_confidence * mult))
                return "CALL", confidence, f"–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª {score_diff:.1f}, —Ä–µ–∂–∏–º: {market_regime}"
            elif put_score > call_score:
                score_diff = put_score - call_score  
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 6 + score_diff
                base_confidence = 6 + min(3, score_diff)
                confidence = min(10, int(base_confidence * mult))
                return "PUT", confidence, f"–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª {score_diff:.1f}, —Ä–µ–∂–∏–º: {market_regime}"
            else:
                return "–ñ–î–ê–¢–¨", 5, "—Ä–∞–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"

        except Exception as e:
            return "–ñ–î–ê–¢–¨", 4, "–æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"

    def analyze_chart_patterns(self, indicators: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä"""
        try:
            rsi = indicators.get('rsi', 50)
            bb_position = indicators.get('bb_position', 0.5)
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            williams_r = indicators.get('williams_r', -50)
            
            call_strength = 0
            put_strength = 0
            reason = ""
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω "–î–≤–æ–π–Ω–æ–µ –¥–Ω–æ" 
            if rsi < 25 and williams_r < -85 and bb_position < 0.15:
                call_strength += 3.5
                reason = "–¥–≤–æ–π–Ω–æ–µ –¥–Ω–æ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ"
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω "–î–≤–æ–π–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞"
            elif rsi > 75 and williams_r > -15 and bb_position > 0.85:
                put_strength += 3.5
                reason = "–¥–≤–æ–π–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ"
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω "–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
            elif rsi > 55 and macd > macd_signal and bb_position > 0.6:
                call_strength += 2.5
                reason = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
                
            # –ü–∞—Ç—Ç–µ—Ä–Ω "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
            elif rsi < 45 and macd < macd_signal and bb_position < 0.4:
                put_strength += 2.5
                reason = "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
                
            # –ü–∞—Ç—Ç–µ—Ä–Ω "–§–ª–∞–≥" (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞)
            elif 40 < rsi < 60 and 0.3 < bb_position < 0.7:
                if macd > macd_signal:
                    call_strength += 1.5
                    reason = "–±—ã—á–∏–π —Ñ–ª–∞–≥"
                else:
                    put_strength += 1.5
                    reason = "–º–µ–¥–≤–µ–∂–∏–π —Ñ–ª–∞–≥"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def analyze_market_psychology(self, indicators: Dict[str, Any], pair: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            rsi = indicators.get('rsi', 50)
            stoch_k = indicators.get('stoch_k', 50)
            mfi = indicators.get('mfi', 50)
            cci = indicators.get('cci', 0)
            
            call_strength = 0
            put_strength = 0
            reason = ""
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            fear_greed_index = (rsi + stoch_k + mfi) / 3
            
            if fear_greed_index < 25:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö
                call_strength += 3.0
                reason = "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö —Ä—ã–Ω–∫–∞ - –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∞—Ç—å"
            elif fear_greed_index > 75:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å
                put_strength += 3.0
                reason = "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ - –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å"
            
            # –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–æ–ª–ø—ã vs —É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏
            if cci < -200 and rsi < 25:  # –¢–æ–ª–ø–∞ –ø—Ä–æ–¥–∞–µ—Ç, —É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—é—Ç
                call_strength += 2.5  
                reason = "—É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –ø—Ä–æ—Ç–∏–≤ —Ç–æ–ª–ø—ã - –ø–æ–∫—É–ø–∫–∞"
            elif cci > 200 and rsi > 75:  # –¢–æ–ª–ø–∞ –ø–æ–∫—É–ø–∞–µ—Ç, —É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞—é—Ç
                put_strength += 2.5
                reason = "—É–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –ø—Ä–æ—Ç–∏–≤ —Ç–æ–ª–ø—ã - –ø—Ä–æ–¥–∞–∂–∞"
            
            # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ (–∫—Ä—É–≥–ª—ã–µ —á–∏—Å–ª–∞)
            current_price = indicators.get('current_price', 0)
            if current_price > 0:
                price_str = f"{current_price:.4f}"
                if price_str.endswith('0000') or price_str.endswith('5000'):
                    call_strength += 1.0
                    put_strength += 1.0  # –ö—Ä—É–≥–ª—ã–µ —É—Ä–æ–≤–Ω–∏ - —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏
                    reason += ", –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def analyze_support_resistance(self, indicators: Dict[str, Any], current_price: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            bb_upper = indicators.get('bb_upper', 0)
            bb_lower = indicators.get('bb_lower', 0)
            sma_20 = indicators.get('sma_20', 0)
            sma_50 = indicators.get('sma_50', 0)
            
            call_strength = 0
            put_strength = 0
            reason = ""
            
            if current_price > 0 and bb_upper > 0 and bb_lower > 0:
                # –ü—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                if current_price > bb_upper * 1.001:
                    call_strength += 2.5
                    reason = "–ø—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"
                
                # –û—Ç—Å–∫–æ–∫ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                elif current_price < bb_lower * 1.001 and current_price > bb_lower * 0.999:
                    call_strength += 2.0
                    reason = "–æ—Ç—Å–∫–æ–∫ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
                
                # –ü—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                elif current_price < bb_lower * 0.999:
                    put_strength += 2.5
                    reason = "–ø—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
                
                # –û—Ç—Å–∫–æ–∫ –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                elif current_price > bb_upper * 0.999 and current_price < bb_upper * 1.001:
                    put_strength += 2.0
                    reason = "–æ—Ç—Å–∫–æ–∫ –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (—Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ)
            if current_price > 0 and sma_20 > 0:
                if current_price > sma_20 * 1.005:  # –°–∏–ª—å–Ω–æ –≤—ã—à–µ SMA20
                    if current_price > sma_50 * 1.005:  # –ò –≤—ã—à–µ SMA50
                        call_strength += 1.5
                        reason += ", —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
                elif current_price < sma_20 * 0.995:  # –°–∏–ª—å–Ω–æ –Ω–∏–∂–µ SMA20
                    if current_price < sma_50 * 0.995:  # –ò –Ω–∏–∂–µ SMA50
                        put_strength += 1.5
                        reason += ", —Å–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def analyze_institutional_flows(self, indicators: Dict[str, Any], pair: str, timeframe: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–¥–≤–∏–∂–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –¥–µ–Ω–µ–≥)"""
        try:
            mfi = indicators.get('mfi', 50)
            volume_sma = indicators.get('volume_sma', 0)
            atr = indicators.get('atr', 0.001)
            macd = indicators.get('macd', 0)
            
            call_strength = 0
            put_strength = 0
            reason = ""
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—Ç–æ–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞
            if mfi > 0:
                if mfi > 80:  # –°–∏–ª—å–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞
                    if macd > 0:  # –° –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏–º–ø—É–ª—å—Å–æ–º
                        call_strength += 2.0
                        reason = "–∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞"
                    else:
                        put_strength += 1.5  # –í–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                        reason = "–∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
                elif mfi < 20:  # –û—Ç—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞
                    if macd < 0:  # –° –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –∏–º–ø—É–ª—å—Å–æ–º
                        put_strength += 2.0
                        reason = "–∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞"
                    else:
                        call_strength += 1.5  # –í–æ–∑–º–æ–∂–Ω–∞ –∞–∫–∫—É–º—É–ª—è—Ü–∏—è
                        reason = "–∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–∫–∫—É–º—É–ª—è—Ü–∏—è"
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if volume_sma > 0:
                # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                call_strength += 0.5
                put_strength += 0.5
                reason += ", –≤—ã—Å–æ–∫–∞—è –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            
            # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º (—Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏)
            if pair == "USD/JPY":
                if atr > 0.008:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏ BOJ
                    put_strength += 1.0
                    reason += ", –≤–æ–∑–º–æ–∂–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏—è BOJ"
            elif pair == "EUR/USD":
                if atr > 0.006:  # ECB intervention signals
                    call_strength += 0.5
                    put_strength += 0.5
                    reason += ", –≤–æ–∑–º–æ–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ECB"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def analyze_market_correlations(self, pair: str, timeframe: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –º–µ–∂—Ä—ã–Ω–æ—á–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        try:
            call_strength = 0
            put_strength = 0
            reason = ""
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            if pair == "EUR/USD":
                # EUR/USD –æ–±—ã—á–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —Ä–∏—Å–∫-–∞–ø–ø–µ—Ç–∏—Ç–æ–º
                call_strength += 1.0
                reason = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä–∏—Å–∫-–∞–ø–ø–µ—Ç–∏—Ç–æ–º"
            elif pair == "USD/JPY":
                # USD/JPY - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∞—Ä–∞ —Ä–∏—Å–∫-–æ–Ω/—Ä–∏—Å–∫-–æ—Ñ—Ñ
                call_strength += 1.2
                reason = "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫-–∞–ø–ø–µ—Ç–∏—Ç–∞"
            elif pair == "GBP/USD":
                # GBP —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –Ω–æ–≤–æ—Å—Ç—è–º –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
                put_strength += 0.5
                call_strength += 0.5
                reason = "–≤—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –Ω–æ–≤–æ—Å—Ç—è–º"
            elif pair == "AUD/USD":
                # AUD –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏
                call_strength += 0.8
                reason = "–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏"
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            if timeframe in ['1m', '3m', '5m']:
                # –ù–∞ –º–∞–ª—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–ª—å–Ω–µ–µ
                call_strength *= 1.2
                put_strength *= 1.2
                reason += ", –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def analyze_fundamental_factors(self, pair: str, timeframe: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        try:
            moscow_tz = pytz.timezone('Europe/Moscow')
            moscow_time = datetime.now(moscow_tz)
            hour = moscow_time.hour
            weekday = moscow_time.weekday()
            
            call_strength = 0
            put_strength = 0
            reason = ""
            
            # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
            if 8 <= hour <= 12:  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                if pair.startswith('EUR') or pair.startswith('GBP'):
                    call_strength += 1.0
                    put_strength += 1.0
                    reason = "–∞–∫—Ç–∏–≤–Ω–∞—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è"
            elif 15 <= hour <= 19:  # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                if 'USD' in pair:
                    call_strength += 1.2
                    put_strength += 1.2
                    reason = "–∞–∫—Ç–∏–≤–Ω–∞—è –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è"
            elif 2 <= hour <= 6:  # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                if pair.endswith('JPY') or pair.startswith('AUD'):
                    call_strength += 0.8
                    put_strength += 0.8
                    reason = "–∞–∑–∏–∞—Ç—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è"
            
            # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
            if weekday == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                call_strength += 0.5
                reason += ", –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã"
            elif weekday == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
                put_strength += 0.3
                call_strength += 0.3
                reason += ", –ø—è—Ç–Ω–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π"
            
            # –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞/–∫–≤–∞—Ä—Ç–∞–ª–∞ (—Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏)
            day = moscow_time.day
            if day >= 28:  # –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
                put_strength += 0.5
                reason += ", –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ - —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def analyze_time_cycles(self, timeframe: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤"""
        try:
            moscow_tz = pytz.timezone('Europe/Moscow')
            moscow_time = datetime.now(moscow_tz)
            minute = moscow_time.minute
            
            call_strength = 0
            put_strength = 0
            reason = ""
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞
            if timeframe == '1m':
                # –î–ª—è 1-–º–∏–Ω—É—Ç–Ω–æ–≥–æ TF –ª—É—á—à–µ –≤—Ö–æ–¥–∏—Ç—å –≤ –Ω–∞—á–∞–ª–µ –º–∏–Ω—É—Ç—ã
                if 0 <= minute % 5 <= 1:
                    call_strength += 1.5
                    put_strength += 1.5
                    reason = "–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –¥–ª—è 1m"
            elif timeframe == '5m':
                # –î–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ TF - –≤ –Ω–∞—á–∞–ª–µ 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if minute % 5 == 0:
                    call_strength += 2.0
                    put_strength += 2.0
                    reason = "–Ω–∞—á–∞–ª–æ 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"
            elif timeframe == '15m':
                # –î–ª—è 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ - –≤ –Ω–∞—á–∞–ª–µ —á–µ—Ç–≤–µ—Ä—Ç–∏ —á–∞—Å–∞
                if minute % 15 == 0:
                    call_strength += 2.5
                    put_strength += 2.5
                    reason = "–Ω–∞—á–∞–ª–æ 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"
            
            # –ò–∑–±–µ–≥–∞–µ–º –≤—Ö–æ–¥–æ–≤ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ü–∏–∫–ª–æ–≤
            if timeframe == '5m' and minute % 5 == 2:
                call_strength -= 1.0
                put_strength -= 1.0
                reason += ", —Å–µ—Ä–µ–¥–∏–Ω–∞ —Ü–∏–∫–ª–∞ - –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def analyze_global_sentiment(self, pair: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        try:
            call_strength = 0
            put_strength = 0
            reason = ""
            
            # –û–±—â–∏–π —Ä–∏—Å–∫-–∞–ø–ø–µ—Ç–∏—Ç –Ω–∞ —Ä—ã–Ω–∫–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤, VIX, —Å–ø—Ä–µ–¥–æ–≤ –∏ —Ç.–¥.
            
            # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
            if pair in ['EUR/USD', 'GBP/USD', 'AUD/USD']:
                # –≠—Ç–∏ –ø–∞—Ä—ã –æ–±—ã—á–Ω–æ —Ä–∞—Å—Ç—É—Ç –ø—Ä–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º —Ä–∏—Å–∫-–∞–ø–ø–µ—Ç–∏—Ç–µ
                call_strength += 1.0
                reason = "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫-–∞–ø–ø–µ—Ç–∏—Ç"
            elif pair == 'USD/JPY':
                # USD/JPY - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
                call_strength += 1.5
                reason = "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"
            elif pair in ['USD/CHF', 'USD/CAD']:
                # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
                call_strength += 0.5
                put_strength += 0.5
                reason = "—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
            moscow_tz = pytz.timezone('Europe/Moscow')
            hour = datetime.now(moscow_tz).hour
            
            if 9 <= hour <= 18:  # –î–Ω–µ–≤–Ω—ã–µ —á–∞—Å—ã - –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–µ –æ–ø—Ç–∏–º–∏–∑–º–∞
                call_strength += 0.3
                reason += ", –¥–Ω–µ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
            else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã - –±–æ–ª—å—à–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏
                put_strength += 0.2
                reason += ", –Ω–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
            
            return {'call_strength': call_strength, 'put_strength': put_strength, 'reason': reason}
        except:
            return {'call_strength': 0, 'put_strength': 0, 'reason': ''}

    def calculate_contradiction_penalty(self, indicators: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            contradictions = 0
            total_checks = 0

            rsi = indicators.get('rsi', 50)
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            bb_position = indicators.get('bb_position', 0.5)
            stoch_k = indicators.get('stoch_k', 50)
            williams_r = indicators.get('williams_r', -50)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π RSI vs MACD
            rsi_bullish = rsi < 30
            macd_bullish = macd > macd_signal
            if (rsi_bullish and not macd_bullish) or (not rsi_bullish and macd_bullish):
                contradictions += 1
            total_checks += 1

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI vs Bollinger
            bb_bullish = bb_position < 0.3
            if (rsi_bullish and not bb_bullish) or (not rsi_bullish and bb_bullish):
                contradictions += 1
            total_checks += 1

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Stochastic vs Williams
            stoch_bullish = stoch_k < 20
            williams_bullish = williams_r < -80
            if (stoch_bullish and not williams_bullish) or (not stoch_bullish and williams_bullish):
                contradictions += 1
            total_checks += 1

            return contradictions / total_checks if total_checks > 0 else 0
        except:
            return 0.5

    def calculate_time_consistency(self, indicators: Dict[str, Any], timeframe: str) -> float:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (—Å–º—è–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º (–ø–æ–≤—ã—à–µ–Ω—ã)
            tf_reliability = {
                '1m': 0.85,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.6
                '3m': 0.88,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.7
                '5m': 0.92,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.8
                '15m': 0.95, # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.9
                '30m': 0.98, # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.95
                '1h': 1.0    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥–µ–∂–Ω—ã–π
            }

            base_reliability = tf_reliability.get(timeframe, 0.9)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å–º—è–≥—á–µ–Ω–Ω–∞—è)
            atr = indicators.get('atr', 0.001)
            price = indicators.get('current_price', 1)

            volatility_ratio = atr / (price * 0.01) if price > 0 else 1

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è)
            if volatility_ratio > 3:
                base_reliability *= 0.85  # –ú–µ–Ω—å—à–∏–π —à—Ç—Ä–∞—Ñ
            elif volatility_ratio > 2:
                base_reliability *= 0.92
            elif volatility_ratio < 0.3:
                base_reliability *= 0.95  # –ú–µ–Ω—å—à–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–∏–∑–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

            return max(0.8, min(1.0, base_reliability))  # –ú–∏–Ω–∏–º—É–º –ø–æ–≤—ã—à–µ–Ω –¥–æ 0.8
        except:
            return 0.9

def render_signal_card(analysis_text: str, pair: str, current_price: float):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å—Ç–∏–ª–µ Telegram"""

    # –ü–∞—Ä—Å–∏–º –∞–Ω–∞–ª–∏–∑
    lines = analysis_text.strip().split('\n')
    signal = "–ñ–î–ê–¢–¨"
    confidence = "5"
    expiration = "3"
    reason = "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"

    for line in lines:
        if "–°–ò–ì–ù–ê–õ:" in line:
            signal = line.split(":")[-1].strip()
        elif "–£–í–ï–†–ï–ù–ù–û–°–¢–¨:" in line:
            confidence = line.split(":")[1].strip().split("/")[0].strip()
        elif "–≠–ö–°–ü–ò–†–ê–¶–ò–Ø:" in line:
            expiration = line.split(":")[1].strip().split()[0].strip()
        elif "–ü–†–ò–ß–ò–ù–ê:" in line:
            reason = line.split(":", 1)[1].strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–∫–∏
    if "CALL" in signal:
        card_class = "signal-call"
        emoji = "üìà"
        action = "–ü–û–ö–£–ü–ö–ê"
        color = "#4CAF50"
    elif "PUT" in signal:
        card_class = "signal-put"
        emoji = "üìâ"
        action = "–ü–†–û–î–ê–ñ–ê"
        color = "#f44336"
    else:
        card_class = "signal-wait"
        emoji = "‚è≥"
        action = "–û–ñ–ò–î–ê–ù–ò–ï"
        color = "#ff9800"

    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    conf_value = min(max(int(confidence), 1), 10)
    indicator_position = (conf_value - 1) * 10  # 0-90%

    st.markdown(f"""
    <div class="signal-card {card_class} slide-in">
        <div class="icon-large">{emoji}</div>
        <h2 style="color: {color}; margin: 0.5rem 0; font-size: 1.8rem;">{action}</h2>
        <div style="font-size: 1.1rem; color: rgba(255,255,255,0.9); margin: 0.5rem 0;">
            <strong>{pair}</strong> ‚Ä¢ {current_price:.5f}
        </div>
        <div style="margin: 1rem 0;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                <span>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                <span style="color: {color}; font-weight: 600;">{confidence}/10</span>
            </div>
            <div class="confidence-bar">
                <div class="confidence-indicator" style="left: {indicator_position}%;"></div>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin: 1rem 0; font-size: 0.9rem;">
            <div>‚è∞ {expiration} –º–∏–Ω</div>
            <div>üïê {moscow_time.strftime('%H:%M:%S')}</div>
        </div>
        <div style="background: rgba(0,0,0,0.2); border-radius: 10px; padding: 0.8rem; margin-top: 1rem;">
            <div style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">
                üí° {reason}
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def render_metrics(indicators: Dict[str, Any]):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –í–°–ï —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Å—Ç–∏–ª–µ Telegram"""

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    rsi = indicators.get('rsi', 50)
    macd = indicators.get('macd', 0)
    macd_signal = indicators.get('macd_signal', 0)
    macd_histogram = indicators.get('macd_histogram', 0)
    bb_position = indicators.get('bb_position', 0.5)
    bb_upper = indicators.get('bb_upper', 0)
    bb_middle = indicators.get('bb_middle', 0)
    bb_lower = indicators.get('bb_lower', 0)
    price_change = indicators.get('price_change', 0)
    current_price = indicators.get('current_price', 0)
    
    # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    sma_20 = indicators.get('sma_20', 0)
    sma_50 = indicators.get('sma_50', 0)
    ema_12 = indicators.get('ema_12', 0)
    ema_26 = indicators.get('ema_26', 0)
    
    # –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
    stoch_k = indicators.get('stoch_k', 50)
    stoch_d = indicators.get('stoch_d', 50)
    williams_r = indicators.get('williams_r', -50)
    cci = indicators.get('cci', 0)
    mfi = indicators.get('mfi', 50)
    uo = indicators.get('ultimate_oscillator', 50)
    trix = indicators.get('trix', 0)
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–¥
    atr = indicators.get('atr', 0.001)
    aroon_up = indicators.get('aroon_up', 50)
    aroon_down = indicators.get('aroon_down', 50)
    volume_sma = indicators.get('volume_sma', 0)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    def get_rsi_status(val):
        return "üî¥" if val > 70 else "üü¢" if val < 30 else "üü°"
    
    def get_stoch_status(val):
        return "üî¥" if val > 80 else "üü¢" if val < 20 else "üü°"
    
    def get_williams_status(val):
        return "üî¥" if val > -20 else "üü¢" if val < -80 else "üü°"
    
    def get_cci_status(val):
        return "üî¥" if val > 100 else "üü¢" if val < -100 else "üü°"
    
    def get_mfi_status(val):
        return "üî¥" if val > 80 else "üü¢" if val < 20 else "üü°"

    # –°—Ç–∞—Ç—É—Å—ã
    rsi_status = get_rsi_status(rsi)
    macd_status = "üìà" if macd > macd_signal else "üìâ"
    bb_status = "üî¥" if bb_position > 0.8 else "üü¢" if bb_position < 0.2 else "üü°"
    price_status = "positive" if price_change > 0 else "negative"
    stoch_status = get_stoch_status(stoch_k)
    williams_status = get_williams_status(williams_r)
    cci_status = get_cci_status(cci)
    mfi_status = get_mfi_status(mfi)
    
    # Aroon —Å—Ç–∞—Ç—É—Å
    aroon_diff = aroon_up - aroon_down
    aroon_status = "üìà" if aroon_diff > 20 else "üìâ" if aroon_diff < -20 else "üü°"

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
    st.markdown("#### üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    st.markdown(f"""
    <div class="metric-container">
        <div class="metric-card">
            <div class="metric-label">RSI (14)</div>
            <div class="metric-value">{rsi:.1f} {rsi_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">MACD</div>
            <div class="metric-value">{macd:.5f} {macd_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">MACD Signal</div>
            <div class="metric-value">{macd_signal:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">MACD Histogram</div>
            <div class="metric-value">{macd_histogram:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">BB –ü–æ–∑–∏—Ü–∏—è</div>
            <div class="metric-value">{bb_position:.0%} {bb_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã</div>
            <div class="metric-value metric-change {price_status}">{price_change:+.2f}%</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–¥–µ—Ç–∞–ª–∏)
    st.markdown("#### üé≠ Bollinger Bands")
    st.markdown(f"""
    <div class="metric-container">
        <div class="metric-card">
            <div class="metric-label">BB –í–µ—Ä—Ö–Ω—è—è</div>
            <div class="metric-value">{bb_upper:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">BB –°—Ä–µ–¥–Ω—è—è</div>
            <div class="metric-value">{bb_middle:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">BB –ù–∏–∂–Ω—è—è</div>
            <div class="metric-value">{bb_lower:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</div>
            <div class="metric-value">{current_price:.5f}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    st.markdown("#### üìà –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ")
    st.markdown(f"""
    <div class="metric-container">
        <div class="metric-card">
            <div class="metric-label">SMA 20</div>
            <div class="metric-value">{sma_20:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">SMA 50</div>
            <div class="metric-value">{sma_50:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">EMA 12</div>
            <div class="metric-value">{ema_12:.5f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">EMA 26</div>
            <div class="metric-value">{ema_26:.5f}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
    st.markdown("#### üéöÔ∏è –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã")
    st.markdown(f"""
    <div class="metric-container">
        <div class="metric-card">
            <div class="metric-label">Stochastic %K</div>
            <div class="metric-value">{stoch_k:.1f} {stoch_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Stochastic %D</div>
            <div class="metric-value">{stoch_d:.1f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Williams %R</div>
            <div class="metric-value">{williams_r:.1f} {williams_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">CCI</div>
            <div class="metric-value">{cci:.1f} {cci_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">MFI</div>
            <div class="metric-value">{mfi:.1f} {mfi_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Ultimate Osc.</div>
            <div class="metric-value">{uo:.1f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">TRIX</div>
            <div class="metric-value">{trix:.6f}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    st.markdown("#### üìä –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    st.markdown(f"""
    <div class="metric-container">
        <div class="metric-card">
            <div class="metric-label">Aroon Up</div>
            <div class="metric-value">{aroon_up:.1f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Aroon Down</div>
            <div class="metric-value">{aroon_down:.1f}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Aroon –¢—Ä–µ–Ω–¥</div>
            <div class="metric-value">{aroon_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">ATR</div>
            <div class="metric-value">{atr:.5f}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if volume_sma > 0:
        st.markdown("#### üìä –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        st.markdown(f"""
        <div class="metric-container">
            <div class="metric-card">
                <div class="metric-label">Volume SMA</div>
                <div class="metric-value">{volume_sma:,.0f}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    total_indicators = 20  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    
    # –ü–æ–¥—Å—á–µ—Ç –±—ã—á—å–∏—Ö/–º–µ–¥–≤–µ–∂—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    bullish_count = 0
    bearish_count = 0
    neutral_count = 0
    
    # RSI
    if rsi < 30:
        bullish_count += 1
    elif rsi > 70:
        bearish_count += 1
    else:
        neutral_count += 1
    
    # MACD
    if macd > macd_signal:
        bullish_count += 1
    else:
        bearish_count += 1
    
    # BB
    if bb_position < 0.2:
        bullish_count += 1
    elif bb_position > 0.8:
        bearish_count += 1
    else:
        neutral_count += 1
    
    # Stochastic
    if stoch_k < 20:
        bullish_count += 1
    elif stoch_k > 80:
        bearish_count += 1
    else:
        neutral_count += 1
    
    # Williams %R
    if williams_r < -80:
        bullish_count += 1
    elif williams_r > -20:
        bearish_count += 1
    else:
        neutral_count += 1

    st.markdown("#### üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    st.markdown(f"""
    <div class="metric-container">
        <div class="metric-card">
            <div class="metric-label">üìà –ë—ã—á—å–∏—Ö</div>
            <div class="metric-value" style="color: #4CAF50;">{bullish_count}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">üìâ –ú–µ–¥–≤–µ–∂—å–∏—Ö</div>
            <div class="metric-value" style="color: #f44336;">{bearish_count}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö</div>
            <div class="metric-value" style="color: #ff9800;">{neutral_count}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">üî¢ –í—Å–µ–≥–æ</div>
            <div class="metric-value" style="color: #667eea;">{total_indicators}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def render_analysis_explanation(indicators: Dict[str, Any], analysis_text: str, pair: str):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ Streamlit"""

    rsi = indicators.get('rsi', 50)
    macd = indicators.get('macd', 0)
    macd_signal = indicators.get('macd_signal', 0)
    bb_position = indicators.get('bb_position', 0.5)
    current_price = indicators.get('current_price', 0)
    sma_20 = indicators.get('sma_20', 0)
    stoch_k = indicators.get('stoch_k', 50)
    williams_r = indicators.get('williams_r', -50)
    atr = indicators.get('atr', 0)

    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    call_indicators = []
    put_indicators = []
    neutral_indicators = []

    # RSI –∞–Ω–∞–ª–∏–∑
    if rsi < 30:
        call_indicators.append("RSI (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
    elif rsi > 70:
        put_indicators.append("RSI (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
    else:
        neutral_indicators.append("RSI (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)")

    # MACD –∞–Ω–∞–ª–∏–∑
    if macd > macd_signal:
        call_indicators.append("MACD (–≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π)")
    else:
        put_indicators.append("MACD (–Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π)")

    # Bollinger Bands
    if bb_position < 0.2:
        call_indicators.append("Bollinger Bands (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)")
    elif bb_position > 0.8:
        put_indicators.append("Bollinger Bands (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)")
    else:
        neutral_indicators.append("Bollinger Bands (—Å—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞)")

    # Stochastic –∞–Ω–∞–ª–∏–∑ (—Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)
    if stoch_k < 20:
        call_indicators.append("Stochastic (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
    elif stoch_k > 80:
        put_indicators.append("Stochastic (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
    else:
        neutral_indicators.append("Stochastic (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)")

    # Williams %R –∞–Ω–∞–ª–∏–∑ (—Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)
    if williams_r < -80:
        call_indicators.append("Williams %R (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
    elif williams_r > -20:
        put_indicators.append("Williams %R (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
    else:
        neutral_indicators.append("Williams %R (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)")

    # –¢—Ä–µ–Ω–¥ (SMA20)
    if current_price > sma_20:
        call_indicators.append("SMA20 (—Ü–µ–Ω–∞ –≤—ã—à–µ)")
    else:
        put_indicators.append("SMA20 (—Ü–µ–Ω–∞ –Ω–∏–∂–µ)")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å–∏–≥–Ω–∞–ª –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    signal_from_analysis = "–ñ–î–ê–¢–¨"
    if "CALL" in analysis_text:
        signal_from_analysis = "CALL"
        signal_color = "#4CAF50"
        signal_icon = "üìà"
        confirming_count = len(call_indicators)
        confirming_list = call_indicators
    elif "PUT" in analysis_text:
        signal_from_analysis = "PUT"
        signal_color = "#f44336"
        signal_icon = "üìâ"
        confirming_count = len(put_indicators)
        confirming_list = put_indicators
    else:
        signal_color = "#ff9800"
        signal_icon = "‚è≥"
        confirming_count = len(neutral_indicators)
        confirming_list = neutral_indicators

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
    total_indicators = len(call_indicators) + len(put_indicators) + len(neutral_indicators)
    signal_strength = "–°–ª–∞–±—ã–π"
    if confirming_count >= 4:
        signal_strength = "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif confirming_count >= 3:
        signal_strength = "–°–∏–ª—å–Ω—ã–π"
    elif confirming_count >= 2:
        signal_strength = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"

    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    st.markdown(f"""
    <div style="background: linear-gradient(145deg, #1a2332, #2d3748); border-radius: 15px; padding: 1.5rem; margin: 1rem 0;">
        <h4 style="color: {signal_color}; margin-bottom: 1rem; text-align: center;">
            {signal_icon} –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {signal_from_analysis}
        </h4>
        <div style="background: rgba(0,0,0,0.3); border-radius: 10px; padding: 1rem; margin-top: 1rem;">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
                <div>
                    <div style="color: #4CAF50; font-weight: 600; font-size: 1.2rem;">üìà {len(call_indicators)}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ó–∞ CALL</div>
                </div>
                <div>
                    <div style="color: #f44336; font-weight: 600; font-size: 1.2rem;">üìâ {len(put_indicators)}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ó–∞ PUT</div>
                </div>
                <div>
                    <div style="color: #ff9800; font-weight: 600; font-size: 1.2rem;">‚ö™ {len(neutral_indicators)}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö</div>
                </div>
                <div>
                    <div style="color: {signal_color}; font-weight: 600; font-size: 1.2rem;">üí™ {signal_strength}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞</div>
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    st.markdown("### üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    col1, col2, col3 = st.columns(3)

    with col1:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è CALL –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(145deg, #1a2e1a, #2d4a2d); 
                border-radius: 15px; 
                padding: 1.5rem; 
                border: 2px solid #4CAF50;
                margin-bottom: 1rem;
                box-shadow: 0 4px 15px rgba(76, 175, 80, 0.2);
            ">
                <div style="text-align: center; margin-bottom: 1rem;">
                    <h4 style="color: #4CAF50; margin: 0; font-size: 1.2rem;">
                        üìà –ó–∞ CALL
                    </h4>
                    <div style="
                        background: #4CAF50; 
                        color: white; 
                        border-radius: 20px; 
                        padding: 0.3rem 0.8rem; 
                        display: inline-block; 
                        margin-top: 0.5rem;
                        font-weight: 600;
                    ">
                        %d –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    </div>
                </div>
            </div>
            """ % len(call_indicators), unsafe_allow_html=True)

            if call_indicators:
                for i, indicator in enumerate(call_indicators):
                    st.success(f"‚úÖ {indicator}")
            else:
                st.error("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")

    with col2:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è PUT –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(145deg, #2e1a1a, #4a2d2d); 
                border-radius: 15px; 
                padding: 1.5rem; 
                border: 2px solid #f44336;
                margin-bottom: 1rem;
                box-shadow: 0 4px 15px rgba(244, 67, 54, 0.2);
            ">
                <div style="text-align: center; margin-bottom: 1rem;">
                    <h4 style="color: #f44336; margin: 0; font-size: 1.2rem;">
                        üìâ –ó–∞ PUT
                    </h4>
                    <div style="
                        background: #f44336; 
                        color: white; 
                        border-radius: 20px; 
                        padding: 0.3rem 0.8rem; 
                        display: inline-block; 
                        margin-top: 0.5rem;
                        font-weight: 600;
                    ">
                        %d –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    </div>
                </div>
            </div>
            """ % len(put_indicators), unsafe_allow_html=True)

            if put_indicators:
                for indicator in put_indicators:
                    st.error(f"‚úÖ {indicator}")
            else:
                st.info("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")

    with col3:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(145deg, #2e2a1a, #4a452d); 
                border-radius: 15px; 
                padding: 1.5rem; 
                border: 2px solid #ff9800;
                margin-bottom: 1rem;
                box-shadow: 0 4px 15px rgba(255, 152, 0, 0.2);
            ">
                <div style="text-align: center; margin-bottom: 1rem;">
                    <h4 style="color: #ff9800; margin: 0; font-size: 1.2rem;">
                        ‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
                    </h4>
                    <div style="
                        background: #ff9800; 
                        color: white; 
                        border-radius: 20px; 
                        padding: 0.3rem 0.8rem; 
                        display: inline-block; 
                        margin-top: 0.5rem;
                        font-weight: 600;
                    ">
                        %d –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    </div>
                </div>
            </div>
            """ % len(neutral_indicators), unsafe_allow_html=True)

            if neutral_indicators:
                for indicator in neutral_indicators:
                    st.warning(f"‚ö†Ô∏è {indicator}")
            else:
                st.success("‚úÖ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è
    st.markdown("---")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ
    total_indicators = len(call_indicators) + len(put_indicators) + len(neutral_indicators)

    st.markdown("""
    <div style="
        background: linear-gradient(145deg, #1e1e2e, #2a2a3e); 
        border-radius: 15px; 
        padding: 1.5rem; 
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    ">
        <h4 style="color: white; text-align: center; margin-bottom: 1rem;">
            üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        </h4>
        <div style="display: flex; justify-content: space-around; text-align: center;">
            <div>
                <div style="color: #4CAF50; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ë—ã—á—å–∏—Ö</div>
            </div>
            <div>
                <div style="color: #f44336; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ú–µ–¥–≤–µ–∂—å–∏—Ö</div>
            </div>
            <div>
                <div style="color: #ff9800; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö</div>
            </div>
            <div>
                <div style="color: #667eea; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–í—Å–µ–≥–æ</div>
            </div>
        </div>
    </div>
    """ % (len(call_indicators), len(put_indicators), len(neutral_indicators), total_indicators), unsafe_allow_html=True)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ Streamlit –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

    # RSI –∞–Ω–∞–ª–∏–∑
    if rsi < 30:
        rsi_status = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ"
        rsi_interpretation = f"RSI {rsi:.1f} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (< 30). –ê–∫—Ç–∏–≤ –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç—É –≤–≤–µ—Ä—Ö."
        rsi_strength = "–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª"
    elif rsi > 70:
        rsi_status = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - —Å–∏–≥–Ω–∞–ª –∫ –ø—Ä–æ–¥–∞–∂–µ"
        rsi_interpretation = f"RSI {rsi:.1f} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (> 70). –ê–∫—Ç–∏–≤ –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–Ω–∏–∑."
        rsi_strength = "–°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª"
    else:
        rsi_status = "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
        rsi_interpretation = f"RSI {rsi:.1f} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ (30-70). –¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."
        rsi_strength = "–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª"

    with st.expander("üéØ RSI (–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)", expanded=True):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {rsi:.1f}")
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {rsi_status}")
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {rsi_interpretation}")
        with col2:
            st.metric("RSI", f"{rsi:.1f}", help="0-30: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, 30-70: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ, 70-100: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ RSI
        rsi_normalized = max(0.0, min(1.0, rsi / 100))
        st.progress(rsi_normalized)
        st.caption("üìà RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –æ—Ç 0 –¥–æ 100")

    # MACD –∞–Ω–∞–ª–∏–∑
    macd_diff = macd - macd_signal
    if macd > macd_signal:
        macd_status = "üìà –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª - MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π"
        macd_interpretation = f"MACD ({macd:.5f}) –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ({macd_signal:.5f}). –ò–º–ø—É–ª—å—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–≤–µ—Ä—Ö."
        macd_trend = "–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
    else:
        macd_status = "üìâ –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª - MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π"
        macd_interpretation = f"MACD ({macd:.5f}) –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ({macd_signal:.5f}). –ò–º–ø—É–ª—å—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω–∏–∑."
        macd_trend = "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"

    with st.expander("üìä MACD (–°—Ö–æ–∂–¥–µ–Ω–∏–µ-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ)", expanded=True):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("MACD", f"{macd:.5f}", f"{macd_diff:+.5f}")
        with col2:
            st.metric("–°–∏–≥–Ω–∞–ª—å–Ω–∞—è", f"{macd_signal:.5f}")
        with col3:
            st.write(f"**–¢—Ä–µ–Ω–¥:** {macd_trend}")

        st.write(f"**–°—Ç–∞—Ç—É—Å:** {macd_status}")
        st.write(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {macd_interpretation}")
        st.caption("üí° MACD –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º–ø—É–ª—å—Å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞")

    # Bollinger Bands –∞–Ω–∞–ª–∏–∑
    if bb_position < 0.2:
        bb_status = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö"
        bb_interpretation = f"–¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–∏—Ö {bb_position:.0%} –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞ –≤–≤–µ—Ä—Ö."
        bb_signal = "–ü–æ–∫—É–ø–∫–∞"
    elif bb_position > 0.8:
        bb_status = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑"
        bb_interpretation = f"–¶–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–∏—Ö {bb_position:.0%} –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑."
        bb_signal = "–ü—Ä–æ–¥–∞–∂–∞"
    else:
        bb_status = "üü° –¶–µ–Ω–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–æ–ª–æ—Å"
        bb_interpretation = f"–¶–µ–Ω–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –ø–æ–ª–æ—Å ({bb_position:.0%}). –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."
        bb_signal = "–û–∂–∏–¥–∞–Ω–∏–µ"

    with st.expander("üé≠ Bollinger Bands (–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)", expanded=True):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–ü–æ–∑–∏—Ü–∏—è –≤ –ø–æ–ª–æ—Å–∞—Ö:** {bb_position:.0%}")
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {bb_status}")
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {bb_interpretation}")
        with col2:
            st.metric("–°–∏–≥–Ω–∞–ª", bb_signal)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ BB
        bb_normalized = max(0.0, min(1.0, bb_position))
        st.progress(bb_normalized)
        st.caption("üìä 0-20%: –ó–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, 80-100%: –ó–æ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")

    # –¢—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑
    price_vs_sma = ((current_price - sma_20) / sma_20) * 100
    if current_price > sma_20:
        trend_status = "üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        trend_interpretation = f"–¶–µ–Ω–∞ ({current_price:.5f}) –≤—ã—à–µ SMA20 ({sma_20:.5f}) –Ω–∞ {price_vs_sma:+.2f}%"
        trend_signal = "–ë—ã—á–∏–π"
    else:
        trend_status = "üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        trend_interpretation = f"–¶–µ–Ω–∞ ({current_price:.5f}) –Ω–∏–∂–µ SMA20 ({sma_20:.5f}) –Ω–∞ {price_vs_sma:+.2f}%"
        trend_signal = "–ú–µ–¥–≤–µ–∂–∏–π"

    with st.expander("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (SMA20)", expanded=True):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("–¶–µ–Ω–∞", f"{current_price:.5f}")
        with col2:
            st.metric("SMA20", f"{sma_20:.5f}", f"{price_vs_sma:+.2f}%")
        with col3:
            st.write(f"**–¢—Ä–µ–Ω–¥:** {trend_signal}")

        st.write(f"**–°—Ç–∞—Ç—É—Å:** {trend_status}")
        st.write(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {trend_interpretation}")
        st.caption("üìä SMA20 - —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    st.subheader("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            "Stochastic %K",
            f"{stoch_k:.1f}",
            help="0-20: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, 80-100: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω"
        )
        if stoch_k < 20:
            st.success("üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
        elif stoch_k > 80:
            st.error("üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
        else:
            st.info("üü° –ù–µ–π—Ç—Ä–∞–ª–µ–Ω")

    with col2:
        st.metric(
            "Williams %R",
            f"{williams_r:.1f}",
            help="-100 –¥–æ -80: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, -20 –¥–æ 0: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω"
        )
        if williams_r < -80:
            st.success("üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
        elif williams_r > -20:
            st.error("üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
        else:
            st.info("üü° –ù–µ–π—Ç—Ä–∞–ª–µ–Ω")

    with col3:
        st.metric(
            "ATR (–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)",
            f"{atr:.5f}",
            help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞"
        )
        if atr > 0:
            volatility_level = "–í—ã—Å–æ–∫–∞—è" if atr > current_price * 0.01 else "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
            st.info(f"üìä {volatility_level}")

    # –û–±—É—á–∞—é—â–∞—è —Å–µ–∫—Ü–∏—è
    st.subheader("üìö –ö–∞–∫ –ø–æ–Ω–∏–º–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã")

    with st.expander("üí° –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º", expanded=False):
        tab1, tab2, tab3 = st.tabs(["üìà CALL", "üìâ PUT", "‚è≥ –ñ–î–ê–¢–¨"])

        with tab1:
            st.write("**–ö–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç—å (CALL):**")
            st.write("‚úÖ RSI < 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
            st.write("‚úÖ MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏")
            st.write("‚úÖ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Bollinger Bands")
            st.write("‚úÖ –¶–µ–Ω–∞ –≤—ã—à–µ SMA20")
            st.write("‚úÖ Stochastic < 20")

        with tab2:
            st.write("**–ö–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–∞—Ç—å (PUT):**")
            st.write("‚ùå RSI > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
            st.write("‚ùå MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏")
            st.write("‚ùå –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Bollinger Bands")
            st.write("‚ùå –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA20")
            st.write("‚ùå Stochastic > 80")

        with tab3:
            st.write("**–ö–æ–≥–¥–∞ –∂–¥–∞—Ç—å:**")
            st.write("‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            st.write("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            st.write("‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥")
            st.write("‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–∏—Å–∫–∏
    st.warning("""
    ‚ö†Ô∏è **–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê:**

    ‚Ä¢ **–ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ 2-5%** –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
    ‚Ä¢ **–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏** —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ
    ‚Ä¢ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã** –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å
    ‚Ä¢ **–ê–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä** - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –≤–∞–º–∏
    ‚Ä¢ **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–æ—Ä–≥—É–π—Ç–µ** —Å—É–º–º–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å
    """)

    st.info("""
    üìä **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑:**

    1. –ò–∑—É—á–∏—Ç–µ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ
    2. –ò—â–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    3. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞
    4. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º
    5. –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """)

def main():
    load_telegram_mobile_css()

    # Telegram-style header
    st.markdown("""
    <div class="telegram-header">
        <div class="app-title">üì± MAJORKA VIP</div>
        <div class="app-subtitle">ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ‚Ä¢ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã</div>
    </div>
    """, unsafe_allow_html=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = PocketOptionAnalyzer()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
    st.markdown('<div class="telegram-card">', unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        currency_pairs = [
            "EUR/USD", "GBP/USD", "USD/JPY", "AUD/USD", "USD/CAD",
            "EUR/GBP", "EUR/JPY", "GBP/JPY", "USD/CHF", "NZD/USD"
        ]
        selected_pair = st.selectbox("üìà –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞", currency_pairs, key="pair_select")

    with col2:
        timeframes = ["1m", "3m", "5m", "15m", "30m", "1h"]
        selected_timeframe = st.selectbox("‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º", timeframes, index=2, key="tf_select")

    st.markdown('</div>', unsafe_allow_html=True)

    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.expander("‚öôÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üîë API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            api_key = st.text_input(
                "OpenAI API Key",
                value=st.session_state.get('openai_api_key', ''),
                type="password",
                help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç OpenAI"
            )

            if api_key != st.session_state.get('openai_api_key', ''):
                st.session_state.openai_api_key = api_key
                st.session_state.analyzer.gpt_api_key = api_key
                if api_key and api_key.startswith('sk-'):
                    st.success("‚úÖ API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω")
                elif api_key:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞")

        with col2:
            st.subheader("üéØ –§–∏–ª—å—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            min_confidence = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤",
                min_value=1,
                max_value=8,
                value=st.session_state.get('min_confidence', 5),
                help="–°–∏–≥–Ω–∞–ª—ã —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã"
            )
            st.session_state.min_confidence = min_confidence

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_filter = st.checkbox(
                "–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏",
                value=st.session_state.get('volatility_filter', True),
                help="–ò—Å–∫–ª—é—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"
            )
            st.session_state.volatility_filter = volatility_filter

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            time_filter = st.checkbox(
                "–£—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è",
                value=st.session_state.get('time_filter', True),
                help="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
            )
            st.session_state.time_filter = time_filter

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.subheader("üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        indicator_cols = st.columns(4)

        with indicator_cols[0]:
            show_advanced = st.checkbox("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", value=True)
        with indicator_cols[1]:
            show_volume = st.checkbox("–û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", value=True)
        with indicator_cols[2]:
            show_volatility = st.checkbox("–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏", value=True)
        with indicator_cols[3]:
            show_warnings = st.checkbox("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö", value=True)

        st.session_state.update({
            'show_advanced': show_advanced,
            'show_volume': show_volume, 
            'show_volatility': show_volatility,
            'show_warnings': show_warnings
        })

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    trading_allowed, time_message = is_trading_time()

    if not trading_allowed:
        st.warning(f"‚è∞ {time_message}. –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")

    # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("üöÄ –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨", key="main_analyze"):

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        progress_bar = st.progress(0)
        status_text = st.empty()

        status_text.text("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        progress_bar.progress(25)

        market_data = st.session_state.analyzer.get_market_data(selected_pair, selected_timeframe)

        if market_data is not None and not market_data.empty:
            status_text.text("üî¢ –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
            progress_bar.progress(50)

            indicators = st.session_state.analyzer.calculate_indicators(market_data)

            if indicators:
                status_text.text("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
                progress_bar.progress(75)

                analysis = st.session_state.analyzer.analyze_with_ai(
                    market_data, indicators, selected_pair, selected_timeframe
                )

                progress_bar.progress(100)
                status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                time.sleep(1)

                # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_bar.empty()
                status_text.empty()

                # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                volatility_info = get_market_volatility(market_data)

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                st.markdown(f"""
                <div class="telegram-card">
                    <h4>üìä –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏</h4>
                    <p><strong>–£—Ä–æ–≤–µ–Ω—å:</strong> {volatility_info['level']}</p>
                    <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</strong> {volatility_info['ratio']:.2f}</p>
                    <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {volatility_info['trade_recommendation']}</p>
                </div>
                """, unsafe_allow_html=True)

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                current_price = indicators.get('current_price', 0)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                if current_price > 0:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    min_confidence = st.session_state.get('min_confidence', 5)
                    volatility_filter = st.session_state.get('volatility_filter', True)
                    time_filter = st.session_state.get('time_filter', True)
                    show_warnings = st.session_state.get('show_warnings', True)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                    confidence_match = re.search(r'–£–í–ï–†–ï–ù–ù–û–°–¢–¨:\s*(\d+)/10', analysis)
                    current_confidence = int(confidence_match.group(1)) if confidence_match else 5

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
                    if time_filter:
                        trading_allowed, time_message = is_trading_time()
                        if not trading_allowed:
                            st.error(f"‚è∞ {time_message}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                    volatility_info = get_market_volatility(market_data)
                    if volatility_filter and volatility_info['level'] in ['–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è']:
                        st.warning(f"üåä –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({volatility_info['level']}) - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏!")

                    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    if show_warnings:
                        risk_warnings = get_risk_warnings(indicators, selected_pair, selected_timeframe)
                        if risk_warnings:
                            st.markdown('<div class="telegram-card">', unsafe_allow_html=True)
                            st.markdown("### ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                            for warning in risk_warnings:
                                st.warning(warning)
                            st.markdown('</div>', unsafe_allow_html=True)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    if current_confidence < min_confidence:
                        st.markdown(f"""
                        <div class="telegram-card" style="border: 2px solid #ff9800;">
                            <div style="text-align: center; color: #ff9800;">
                                <h3>üö´ –°–ò–ì–ù–ê–õ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù</h3>
                                <p>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {current_confidence}/10 –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ {min_confidence}/10</p>
                                <p><small>–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞</small></p>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)

                    render_signal_card(analysis, selected_pair, current_price)

                    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
                    st.markdown('<div class="telegram-card">', unsafe_allow_html=True)
                    st.markdown("### üìä –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                    render_metrics(indicators)
                    st.markdown('</div>', unsafe_allow_html=True)

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
                    with st.expander("üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=False):
                        st.write("**–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:**")
                        for key, value in indicators.items():
                            st.write(f"{key}: {value}")
                else:
                    st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã")

                # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
                st.markdown('<div class="telegram-card">', unsafe_allow_html=True)
                st.markdown("### üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞")
                render_analysis_explanation(indicators, analysis, selected_pair)
                st.markdown('</div>', unsafe_allow_html=True)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
                with st.expander("üìà –ì—Ä–∞—Ñ–∏–∫ –∏ –¥–µ—Ç–∞–ª–∏", expanded=False):
                    chart_data = market_data[['Close']].tail(50)
                    st.line_chart(chart_data, height=300)

                    st.markdown("**üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:**")
                    recent_data = market_data[['Open', 'High', 'Low', 'Close']].tail(5)
                    st.dataframe(recent_data, use_container_width=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                if 'analysis_history' not in st.session_state:
                    st.session_state.analysis_history = []

                moscow_tz = pytz.timezone('Europe/Moscow')
                moscow_time = datetime.now(moscow_tz)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                signal_type = "–ñ–î–ê–¢–¨"
                if "CALL" in analysis:
                    signal_type = "CALL"
                elif "PUT" in analysis:
                    signal_type = "PUT"

                st.session_state.analysis_history.append({
                    'time': moscow_time,
                    'pair': selected_pair,
                    'timeframe': selected_timeframe,
                    'signal': signal_type,
                    'price': current_price,
                    'analysis': analysis
                })

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                if len(st.session_state.analysis_history) > 10:
                    st.session_state.analysis_history = st.session_state.analysis_history[-10:]

            else:
                progress_bar.empty()
                status_text.empty()
                st.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        else:
            progress_bar.empty()
            status_text.empty()
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞")

    # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
    if 'analysis_history' in st.session_state and st.session_state.analysis_history:
        st.markdown('<div class="telegram-card">', unsafe_allow_html=True)
        st.markdown("### üìö –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")

        for analysis_item in reversed(st.session_state.analysis_history[-5:]):
            signal = analysis_item['signal']
            time_str = analysis_item['time'].strftime('%H:%M')
            pair = analysis_item['pair']
            price = analysis_item['price']

            if signal == "CALL":
                icon = "üìà"
                class_name = "history-call"
            elif signal == "PUT":
                icon = "üìâ"
                class_name = "history-put"
            else:
                icon = "‚è≥"
                class_name = "history-wait"

            st.markdown(f"""
            <div class="history-item {class_name}">
                <div>
                    <strong>{icon} {signal}</strong><br>
                    <small>{pair} ‚Ä¢ {price:.5f}</small>
                </div>
                <div style="text-align: right;">
                    <small>{time_str}</small>
                </div>
            </div>
            """, unsafe_allow_html=True)

        st.markdown('</div>', unsafe_allow_html=True)

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
    with st.expander("üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", expanded=False):
        st.markdown("""
        **üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
        1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
        2. –ù–∞–∂–º–∏—Ç–µ "–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨"
        3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

        **üìä –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:**
        - üìà **CALL** - —Ü–µ–Ω–∞ –ø–æ–π–¥–µ—Ç –≤–≤–µ—Ä—Ö
        - üìâ **PUT** - —Ü–µ–Ω–∞ –ø–æ–π–¥–µ—Ç –≤–Ω–∏–∑
        - ‚è≥ **–ñ–î–ê–¢–¨** - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å

        **‚ö†Ô∏è –í–∞–∂–Ω–æ:**
        - –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ 2-5% –¥–µ–ø–æ–∑–∏—Ç–∞
        - –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ –¥–µ–º–æ —Å—á–µ—Ç–µ
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
        """)

    # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
    st.markdown("""
    <div class="telegram-card" style="margin-top: 2rem;">
        <div style="text-align: center; color: rgba(255,255,255,0.7); font-size: 0.9rem;">
            ‚ö†Ô∏è <strong>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</strong> –¢–æ—Ä–≥–æ–≤–ª—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ –Ω–µ—Å–µ—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏.<br>
            –ê–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.
        </div>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()