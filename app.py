import streamlit as st
import time
import io
import base64
from datetime import datetime
import pytz
import requests
import json
import pandas as pd
import numpy as np
from typing import Dict, Any
import yfinance as yf
import ta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
st.set_page_config(
    page_title="üìä MAJORKA VIP",
    page_icon="üì±",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ Telegram –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
def load_telegram_mobile_css():
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@300;400;500;600;700&display=swap');

    * {
        box-sizing: border-box;
    }

    .main {
        font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
        background: #0f0f23;
        padding: 0 !important;
        margin: 0 !important;
        max-width: 100% !important;
    }

    .stApp {
        background: linear-gradient(180deg, #0f0f23 0%, #1a1a2e 100%);
        overflow-x: hidden;
    }

    .block-container {
        padding: 1rem 0.5rem !important;
        max-width: 100% !important;
    }

    /* Telegram-style header */
    .telegram-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 0 0 25px 25px;
        padding: 1.5rem 1rem;
        margin: -1rem -0.5rem 1rem -0.5rem;
        text-align: center;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .app-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: white;
        margin: 0;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    .app-subtitle {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
        margin: 0.3rem 0 0 0;
        font-weight: 400;
    }

    /* Telegram-style cards */
    .telegram-card {
        background: linear-gradient(145deg, #1e1e2e, #2a2a3e);
        border-radius: 18px;
        padding: 1.2rem;
        margin: 0.8rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(10px);
    }

    .signal-card {
        background: linear-gradient(145deg, #1a2332, #2d3748);
        border-radius: 20px;
        padding: 1.5rem;
        margin: 1rem 0;
        text-align: center;
        border: 2px solid;
        position: relative;
        overflow: hidden;
    }

    .signal-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #4CAF50, #8BC34A);
        border-radius: 20px 20px 0 0;
    }

    .signal-call {
        border-color: #4CAF50;
        background: linear-gradient(145deg, #1a2e1a, #2d4a2d);
    }

    .signal-call::before {
        background: linear-gradient(90deg, #4CAF50, #8BC34A);
    }

    .signal-put {
        border-color: #f44336;
        background: linear-gradient(145deg, #2e1a1a, #4a2d2d);
    }

    .signal-put::before {
        background: linear-gradient(90deg, #f44336, #ff5722);
    }

    .signal-wait {
        border-color: #ff9800;
        background: linear-gradient(145deg, #2e2a1a, #4a452d);
    }

    .signal-wait::before {
        background: linear-gradient(90deg, #ff9800, #ffc107);
    }

    /* –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram */
    .stButton > button {
        background: linear-gradient(45deg, #667eea, #764ba2) !important;
        color: white !important;
        border: none !important;
        border-radius: 15px !important;
        padding: 1rem 2rem !important;
        font-weight: 600 !important;
        font-size: 1rem !important;
        width: 100% !important;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4) !important;
        transition: all 0.3s ease !important;
        margin: 0.5rem 0 !important;
    }

    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6) !important;
    }

    /* –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram */
    .metric-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 0.8rem;
        margin: 1rem 0;
    }

    .metric-card {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e);
        border-radius: 15px;
        padding: 1rem;
        text-align: center;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .metric-value {
        font-size: 1.4rem;
        font-weight: 700;
        color: #667eea;
        margin: 0.3rem 0;
    }

    .metric-label {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .metric-change {
        font-size: 0.9rem;
        font-weight: 600;
        margin-top: 0.2rem;
    }

    .metric-change.positive { color: #4CAF50; }
    .metric-change.negative { color: #f44336; }

    /* –°–µ–ª–µ–∫—Ç—ã –∏ –∏–Ω–ø—É—Ç—ã */
    .stSelectbox > div > div {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 12px !important;
        color: white !important;
    }

    .stTextInput > div > div > input {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 12px !important;
        color: white !important;
    }

    /* –≠–∫—Å–ø–∞–Ω–¥–µ—Ä—ã */
    .streamlit-expanderHeader {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e) !important;
        border-radius: 12px !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        color: white !important;
    }

    .streamlit-expanderContent {
        background: rgba(30, 30, 46, 0.8) !important;
        border-radius: 0 0 12px 12px !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        border-top: none !important;
    }

    /* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */
    .progress-container {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 0.5rem;
        margin: 0.5rem 0;
    }

    .confidence-bar {
        height: 8px;
        border-radius: 6px;
        background: linear-gradient(90deg, #f44336 0%, #ff9800 50%, #4CAF50 100%);
        position: relative;
        margin: 0.5rem 0;
    }

    .confidence-indicator {
        position: absolute;
        top: -2px;
        width: 12px;
        height: 12px;
        background: white;
        border-radius: 50%;
        border: 2px solid #667eea;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    .pulse {
        animation: pulse 2s infinite;
    }

    @keyframes slideIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .slide-in {
        animation: slideIn 0.5s ease-out;
    }

    /* –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ */
    .history-item {
        background: linear-gradient(145deg, #2a2a3e, #1e1e2e);
        border-radius: 12px;
        padding: 0.8rem;
        margin: 0.5rem 0;
        border-left: 4px solid;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .history-call { border-left-color: #4CAF50; }
    .history-put { border-left-color: #f44336; }
    .history-wait { border-left-color: #ff9800; }

    /* –°–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit */
    #MainMenu { visibility: hidden; }
    footer { visibility: hidden; }
    header { visibility: hidden; }
    .stDeployButton { display: none; }

    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .metric-container {
            grid-template-columns: repeat(2, 1fr);
        }

        .app-title {
            font-size: 1.5rem;
        }

        .telegram-card {
            margin: 0.5rem 0;
            padding: 1rem;
        }
    }

    /* –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */
    .success-text { color: #4CAF50; font-weight: 600; }
    .error-text { color: #f44336; font-weight: 600; }
    .warning-text { color: #ff9800; font-weight: 600; }
    .info-text { color: #667eea; font-weight: 600; }

    /* –ò–∫–æ–Ω–∫–∏ –∏ —ç–º–æ–¥–∑–∏ */
    .icon-large { font-size: 2rem; margin: 0.5rem 0; }
    .icon-medium { font-size: 1.5rem; }
    .icon-small { font-size: 1rem; }

    /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
    .stPlotlyChart {
        background: transparent !important;
    }

    /* Telegram-style toggles */
    .stCheckbox > label {
        color: white !important;
        font-weight: 500 !important;
    }

    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        background: linear-gradient(180deg, #1e1e2e 0%, #2a2a3e 100%) !important;
    }

    .css-1d391kg .stSelectbox label {
        color: white !important;
    }
    </style>
    """, unsafe_allow_html=True)

class PocketOptionAnalyzer:
    def __init__(self):
        self.gpt_api_key = None
        if 'openai_api_key' in st.session_state:
            self.gpt_api_key = st.session_state.openai_api_key

    def get_market_data(self, pair: str, timeframe: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ Yahoo Finance —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π - –º–∏–Ω–∏–º—É–º 500 —Å–≤–µ—á–µ–π"""
        try:
            if "/" in pair:
                symbol = pair.replace("/", "") + "=X"
            else:
                symbol = pair

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º 500 —Å–≤–µ—á–µ–π
            period_map = {
                "1m": "5d", "3m": "10d", "5m": "1mo", "15m": "2mo",
                "30m": "3mo", "1h": "6mo", "4h": "1y", "1d": "2y"
            }

            interval_map = {
                "1m": "1m", "3m": "5m", "5m": "5m", "15m": "15m",
                "30m": "30m", "1h": "1h", "4h": "1h", "1d": "1d"
            }

            period = period_map.get(timeframe, "6mo")
            interval = interval_map.get(timeframe, "1h")

            ticker = yf.Ticker(symbol)
            data = ticker.history(period=period, interval=interval)

            if data.empty:
                st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ —É–±–∏—Ä–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            data = data.replace([np.inf, -np.inf], np.nan)
            data = data.dropna()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['Open', 'High', 'Low', 'Close']
            if not all(col in data.columns for col in required_columns):
                st.error(f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö - —Ç—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 500 —Å–≤–µ—á–µ–π
            if len(data) < 500:
                st.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {pair}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 500 –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
                if len(data) < 100:
                    st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {pair}")
                    return None

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if data['Close'].isna().all() or (data['Close'] <= 0).all():
                st.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair}")
                return None

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            data = data.sort_index()

            return data

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return None

    def calculate_indicators(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - 15+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            indicators = {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if len(df) < 200:
                st.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö 15+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 500 —Å–≤–µ—á–µ–π.")
            
            st.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏")

            # RSI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                rsi_indicator = ta.momentum.RSIIndicator(df['Close'])
                rsi_value = rsi_indicator.rsi().iloc[-1]
                indicators['rsi'] = rsi_value if not pd.isna(rsi_value) else 50
            except:
                indicators['rsi'] = 50

            # MFI (Money Flow Index) - –ù–û–í–´–ô
            try:
                mfi_indicator = ta.volume.MFIIndicator(df['High'], df['Low'], df['Close'], df['Volume'] if 'Volume' in df.columns else df['Close'])
                mfi_value = mfi_indicator.money_flow_index().iloc[-1]
                indicators['mfi'] = mfi_value if not pd.isna(mfi_value) else 50
            except:
                indicators['mfi'] = 50

            # CCI (Commodity Channel Index) - –ù–û–í–´–ô
            try:
                cci_indicator = ta.trend.CCIIndicator(df['High'], df['Low'], df['Close'])
                cci_value = cci_indicator.cci().iloc[-1]
                indicators['cci'] = cci_value if not pd.isna(cci_value) else 0
            except:
                indicators['cci'] = 0

            # ADX (Average Directional Index) - –ù–û–í–´–ô
            try:
                adx_indicator = ta.trend.ADXIndicator(df['High'], df['Low'], df['Close'])
                adx_value = adx_indicator.adx().iloc[-1]
                indicators['adx'] = adx_value if not pd.isna(adx_value) else 25
            except:
                indicators['adx'] = 25

            # Parabolic SAR - –ù–û–í–´–ô
            try:
                psar_indicator = ta.trend.PSARIndicator(df['High'], df['Low'], df['Close'])
                psar_value = psar_indicator.psar().iloc[-1]
                indicators['psar'] = psar_value if not pd.isna(psar_value) else df['Close'].iloc[-1]
            except:
                indicators['psar'] = df['Close'].iloc[-1]

            # Ultimate Oscillator - –ù–û–í–´–ô
            try:
                uo_indicator = ta.momentum.UltimateOscillator(df['High'], df['Low'], df['Close'])
                uo_value = uo_indicator.ultimate_oscillator().iloc[-1]
                indicators['ultimate_oscillator'] = uo_value if not pd.isna(uo_value) else 50
            except:
                indicators['ultimate_oscillator'] = 50

            # Aroon Oscillator - –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
            try:
                aroon_indicator = ta.trend.AroonIndicator(df['High'], df['Low'])
                aroon_up = aroon_indicator.aroon_up().iloc[-1]
                aroon_down = aroon_indicator.aroon_down().iloc[-1]
                aroon_oscillator = aroon_up - aroon_down
                indicators['aroon_up'] = aroon_up if not pd.isna(aroon_up) else 50
                indicators['aroon_down'] = aroon_down if not pd.isna(aroon_down) else 50
                indicators['aroon_oscillator'] = aroon_oscillator if not pd.isna(aroon_oscillator) else 0
            except:
                indicators['aroon_up'] = 50
                indicators['aroon_down'] = 50
                indicators['aroon_oscillator'] = 0

            # Keltner Channel - –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
            try:
                keltner = ta.volatility.KeltnerChannel(df['High'], df['Low'], df['Close'])
                kc_upper = keltner.keltner_channel_hband().iloc[-1]
                kc_middle = keltner.keltner_channel_mband().iloc[-1]
                kc_lower = keltner.keltner_channel_lband().iloc[-1]
                indicators['kc_upper'] = kc_upper if not pd.isna(kc_upper) else df['Close'].iloc[-1] * 1.02
                indicators['kc_middle'] = kc_middle if not pd.isna(kc_middle) else df['Close'].iloc[-1]
                indicators['kc_lower'] = kc_lower if not pd.isna(kc_lower) else df['Close'].iloc[-1] * 0.98
                
                # –ü–æ–∑–∏—Ü–∏—è –≤ Keltner Channel
                if indicators['kc_upper'] != indicators['kc_lower']:
                    indicators['kc_position'] = (df['Close'].iloc[-1] - indicators['kc_lower']) / (indicators['kc_upper'] - indicators['kc_lower'])
                else:
                    indicators['kc_position'] = 0.5
            except:
                indicators['kc_upper'] = df['Close'].iloc[-1] * 1.02
                indicators['kc_middle'] = df['Close'].iloc[-1]
                indicators['kc_lower'] = df['Close'].iloc[-1] * 0.98
                indicators['kc_position'] = 0.5

            # TSI (True Strength Index) - –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
            try:
                tsi_indicator = ta.momentum.TSIIndicator(df['Close'])
                tsi_value = tsi_indicator.tsi().iloc[-1]
                indicators['tsi'] = tsi_value if not pd.isna(tsi_value) else 0
            except:
                indicators['tsi'] = 0

            # VWAP (Volume Weighted Average Price) - –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
            try:
                if 'Volume' in df.columns and not df['Volume'].isna().all():
                    vwap_indicator = ta.volume.VolumeSMAIndicator(df['Close'], df['Volume'])
                    vwap_value = vwap_indicator.volume_sma().iloc[-1]
                    indicators['vwap'] = vwap_value if not pd.isna(vwap_value) else df['Close'].iloc[-1]
                else:
                    indicators['vwap'] = df['Close'].iloc[-1]
            except:
                indicators['vwap'] = df['Close'].iloc[-1]

            # ROC (Rate of Change) - –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
            try:
                roc_indicator = ta.momentum.ROCIndicator(df['Close'], window=min(12, len(df)-1))
                roc_value = roc_indicator.roc().iloc[-1]
                indicators['roc'] = roc_value if not pd.isna(roc_value) else 0
            except:
                indicators['roc'] = 0

            # Ichimoku Cloud - –ù–û–í–´–ô –ò–ù–î–ò–ö–ê–¢–û–†
            try:
                ichimoku = ta.trend.IchimokuIndicator(df['High'], df['Low'])
                ichimoku_a = ichimoku.ichimoku_a().iloc[-1]
                ichimoku_b = ichimoku.ichimoku_b().iloc[-1]
                indicators['ichimoku_a'] = ichimoku_a if not pd.isna(ichimoku_a) else df['Close'].iloc[-1]
                indicators['ichimoku_b'] = ichimoku_b if not pd.isna(ichimoku_b) else df['Close'].iloc[-1]
                
                # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±–ª–∞–∫–∞
                current_price = df['Close'].iloc[-1]
                if current_price > max(ichimoku_a, ichimoku_b):
                    indicators['ichimoku_position'] = 1  # –í—ã—à–µ –æ–±–ª–∞–∫–∞
                elif current_price < min(ichimoku_a, ichimoku_b):
                    indicators['ichimoku_position'] = -1  # –ù–∏–∂–µ –æ–±–ª–∞–∫–∞
                else:
                    indicators['ichimoku_position'] = 0  # –í –æ–±–ª–∞–∫–µ
            except:
                indicators['ichimoku_a'] = df['Close'].iloc[-1]
                indicators['ichimoku_b'] = df['Close'].iloc[-1]
                indicators['ichimoku_position'] = 0

            # MACD —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                macd = ta.trend.MACD(df['Close'])
                macd_value = macd.macd().iloc[-1]
                macd_signal_value = macd.macd_signal().iloc[-1]
                macd_histogram_value = macd.macd_diff().iloc[-1]
                
                indicators['macd'] = macd_value if not pd.isna(macd_value) else 0
                indicators['macd_signal'] = macd_signal_value if not pd.isna(macd_signal_value) else 0
                indicators['macd_histogram'] = macd_histogram_value if not pd.isna(macd_histogram_value) else 0
            except:
                indicators['macd'] = 0
                indicators['macd_signal'] = 0
                indicators['macd_histogram'] = 0

            # Bollinger Bands —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                bb = ta.volatility.BollingerBands(df['Close'])
                bb_upper = bb.bollinger_hband().iloc[-1]
                bb_middle = bb.bollinger_mavg().iloc[-1]
                bb_lower = bb.bollinger_lband().iloc[-1]
                
                indicators['bb_upper'] = bb_upper if not pd.isna(bb_upper) else df['Close'].iloc[-1] * 1.02
                indicators['bb_middle'] = bb_middle if not pd.isna(bb_middle) else df['Close'].iloc[-1]
                indicators['bb_lower'] = bb_lower if not pd.isna(bb_lower) else df['Close'].iloc[-1] * 0.98
                
                # –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ BB
                if indicators['bb_upper'] != indicators['bb_lower']:
                    indicators['bb_position'] = (df['Close'].iloc[-1] - indicators['bb_lower']) / (indicators['bb_upper'] - indicators['bb_lower'])
                else:
                    indicators['bb_position'] = 0.5
            except:
                indicators['bb_upper'] = df['Close'].iloc[-1] * 1.02
                indicators['bb_middle'] = df['Close'].iloc[-1]
                indicators['bb_lower'] = df['Close'].iloc[-1] * 0.98
                indicators['bb_position'] = 0.5

            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                sma_20 = ta.trend.SMAIndicator(df['Close'], window=min(20, len(df)-1)).sma_indicator().iloc[-1]
                indicators['sma_20'] = sma_20 if not pd.isna(sma_20) else df['Close'].iloc[-1]
            except:
                indicators['sma_20'] = df['Close'].iloc[-1]

            try:
                if len(df) >= 50:
                    sma_50 = ta.trend.SMAIndicator(df['Close'], window=50).sma_indicator().iloc[-1]
                    indicators['sma_50'] = sma_50 if not pd.isna(sma_50) else df['Close'].iloc[-1]
                else:
                    indicators['sma_50'] = df['Close'].iloc[-1]
            except:
                indicators['sma_50'] = df['Close'].iloc[-1]

            try:
                ema_12 = ta.trend.EMAIndicator(df['Close'], window=min(12, len(df)-1)).ema_indicator().iloc[-1]
                indicators['ema_12'] = ema_12 if not pd.isna(ema_12) else df['Close'].iloc[-1]
            except:
                indicators['ema_12'] = df['Close'].iloc[-1]

            try:
                ema_26 = ta.trend.EMAIndicator(df['Close'], window=min(26, len(df)-1)).ema_indicator().iloc[-1]
                indicators['ema_26'] = ema_26 if not pd.isna(ema_26) else df['Close'].iloc[-1]
            except:
                indicators['ema_26'] = df['Close'].iloc[-1]

            # Stochastic —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                stoch = ta.momentum.StochasticOscillator(df['High'], df['Low'], df['Close'])
                stoch_k = stoch.stoch().iloc[-1]
                stoch_d = stoch.stoch_signal().iloc[-1]
                
                indicators['stoch_k'] = stoch_k if not pd.isna(stoch_k) else 50
                indicators['stoch_d'] = stoch_d if not pd.isna(stoch_d) else 50
            except:
                indicators['stoch_k'] = 50
                indicators['stoch_d'] = 50

            # ATR —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                atr = ta.volatility.AverageTrueRange(df['High'], df['Low'], df['Close']).average_true_range().iloc[-1]
                indicators['atr'] = atr if not pd.isna(atr) else 0.001
            except:
                indicators['atr'] = 0.001

            # Williams %R —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                williams_r = ta.momentum.WilliamsRIndicator(df['High'], df['Low'], df['Close']).williams_r().iloc[-1]
                indicators['williams_r'] = williams_r if not pd.isna(williams_r) else -50
            except:
                indicators['williams_r'] = -50

            # Volume indicators (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–º)
            if 'Volume' in df.columns and not df['Volume'].isna().all():
                try:
                    volume_sma = df['Volume'].rolling(window=min(20, len(df))).mean().iloc[-1]
                    indicators['volume_sma'] = volume_sma if not pd.isna(volume_sma) else 0
                except:
                    indicators['volume_sma'] = 0

            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            indicators['current_price'] = df['Close'].iloc[-1]
            try:
                if len(df) > 1:
                    price_change = ((df['Close'].iloc[-1] - df['Close'].iloc[-2]) / df['Close'].iloc[-2]) * 100
                    indicators['price_change'] = price_change if not pd.isna(price_change) else 0
                else:
                    indicators['price_change'] = 0
            except:
                indicators['price_change'] = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            required_indicators = ['rsi', 'macd', 'macd_signal', 'bb_position', 'sma_20', 'stoch_k', 'williams_r', 'current_price']
            for indicator in required_indicators:
                if indicator not in indicators or pd.isna(indicators[indicator]):
                    st.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {indicator}")

            return indicators

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                'rsi': 50,
                'macd': 0,
                'macd_signal': 0,
                'macd_histogram': 0,
                'bb_upper': 0,
                'bb_middle': 0,
                'bb_lower': 0,
                'bb_position': 0.5,
                'sma_20': 0,
                'sma_50': 0,
                'ema_12': 0,
                'ema_26': 0,
                'stoch_k': 50,
                'stoch_d': 50,
                'atr': 0.001,
                'williams_r': -50,
                'current_price': 0,
                'price_change': 0
            }

    def analyze_with_ai(self, market_data: pd.DataFrame, indicators: Dict[str, Any], pair: str, timeframe: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        if not self.gpt_api_key or not self.gpt_api_key.startswith('sk-'):
            return self.telegram_analysis(indicators, pair, timeframe)

        try:
            recent_prices = market_data['Close'].tail(10).tolist()
            highs = market_data['High'].tail(5).tolist()
            lows = market_data['Low'].tail(5).tolist()

            moscow_tz = pytz.timezone('Europe/Moscow')
            moscow_time = datetime.now(moscow_tz)

            current_price = indicators.get('current_price', 0)
            price_change = indicators.get('price_change', 0)
            rsi = indicators.get('rsi', 0)
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            bb_position = indicators.get('bb_position', 0)
            sma_20 = indicators.get('sma_20', 0)

            prompt = f"""
            –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å 15+ –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ –≤ —Å—Ç–∏–ª–µ Telegram –±–æ—Ç–∞.
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair} –Ω–∞ {timeframe} –∏ –¥–∞–π –ß–ï–¢–ö–ò–ô —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.

            –î–ê–ù–ù–´–ï ({moscow_time.strftime('%H:%M:%S MSK')}):
            - –ü–∞—Ä–∞: {pair} | –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}
            - –¶–µ–Ω–∞: {current_price:.5f} ({price_change:+.2f}%)
            - RSI: {rsi:.1f} | MACD: {macd:.5f}
            - BB –ø–æ–∑–∏—Ü–∏—è: {bb_position:.2f} | SMA20: {sma_20:.5f}

            –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
            1. –î–∞–π –ß–ï–¢–ö–ò–ô —Å–∏–≥–Ω–∞–ª: üü¢ CALL –∏–ª–∏ üî¥ PUT –∏–ª–∏ ‚ö™ –ñ–î–ê–¢–¨
            2. –£–∫–∞–∂–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 1-10
            3. –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏: 1-5 –º–∏–Ω—É—Ç
            4. –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

            –§–û–†–ú–ê–¢ (—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è):
            üéØ –°–ò–ì–ù–ê–õ: [CALL/PUT/–ñ–î–ê–¢–¨]
            üìä –£–í–ï–†–ï–ù–ù–û–°–¢–¨: [X/10]
            ‚è∞ –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: [X –º–∏–Ω]
            üí° –ü–†–ò–ß–ò–ù–ê: [–∫—Ä–∞—Ç–∫–æ]
            """

            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.gpt_api_key}"
            }

            payload = {
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤. –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã."},
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 500,
                "temperature": 0.2
            }

            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )

            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                return self.telegram_analysis(indicators, pair, timeframe)

        except Exception as e:
            return self.telegram_analysis(indicators, pair, timeframe)

    def telegram_analysis(self, indicators: Dict[str, Any], pair: str, timeframe: str) -> str:
        """–ü–û–õ–ù–û–°–¢–¨–Æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö 15+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = indicators.get('rsi', 50)
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            bb_position = indicators.get('bb_position', 0.5)
            current_price = indicators.get('current_price', 0)
            sma_20 = indicators.get('sma_20', 0)
            sma_50 = indicators.get('sma_50', 0)
            ema_12 = indicators.get('ema_12', 0)
            ema_26 = indicators.get('ema_26', 0)
            stoch_k = indicators.get('stoch_k', 50)
            stoch_d = indicators.get('stoch_d', 50)
            williams_r = indicators.get('williams_r', -50)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            mfi = indicators.get('mfi', 50)
            cci = indicators.get('cci', 0)
            adx = indicators.get('adx', 25)
            psar = indicators.get('psar', current_price)
            ultimate_oscillator = indicators.get('ultimate_oscillator', 50)
            aroon_up = indicators.get('aroon_up', 50)
            aroon_down = indicators.get('aroon_down', 50)
            aroon_oscillator = indicators.get('aroon_oscillator', 0)
            kc_position = indicators.get('kc_position', 0.5)
            tsi = indicators.get('tsi', 0)
            vwap = indicators.get('vwap', current_price)
            roc = indicators.get('roc', 0)
            ichimoku_position = indicators.get('ichimoku_position', 0)

            # –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤–µ—Å–∞–º–∏ (–º–∞–∫—Å–∏–º—É–º 100 –±–∞–ª–ª–æ–≤)
            call_score = 0
            put_score = 0
            signal_reasons = []
            total_weight = 0

            # 1. RSI - –ö–ª—é—á–µ–≤–æ–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä (–≤–µ—Å 8)
            total_weight += 8
            if rsi < 25:
                call_score += 8
                signal_reasons.append("RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif rsi < 35:
                call_score += 6
                signal_reasons.append("RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif rsi > 75:
                put_score += 8
                signal_reasons.append("RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
            elif rsi > 65:
                put_score += 6
                signal_reasons.append("RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # 2. Stochastic - –ö–ª—é—á–µ–≤–æ–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä (–≤–µ—Å 7)
            total_weight += 7
            if stoch_k < 15 and stoch_d < 15:
                call_score += 7
                signal_reasons.append("Stochastic —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif stoch_k < 25:
                call_score += 5
                signal_reasons.append("Stochastic –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif stoch_k > 85 and stoch_d > 85:
                put_score += 7
                signal_reasons.append("Stochastic —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
            elif stoch_k > 75:
                put_score += 5
                signal_reasons.append("Stochastic –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # 3. Williams %R - –ö–ª—é—á–µ–≤–æ–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä (–≤–µ—Å 7)
            total_weight += 7
            if williams_r < -85:
                call_score += 7
                signal_reasons.append("Williams %R —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif williams_r < -75:
                call_score += 5
                signal_reasons.append("Williams %R –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif williams_r > -15:
                put_score += 7
                signal_reasons.append("Williams %R —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
            elif williams_r > -25:
                put_score += 5
                signal_reasons.append("Williams %R –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # 4. MFI - –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ (–≤–µ—Å 6)
            total_weight += 6
            if mfi < 15:
                call_score += 6
                signal_reasons.append("MFI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif mfi < 25:
                call_score += 4
                signal_reasons.append("MFI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif mfi > 85:
                put_score += 6
                signal_reasons.append("MFI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
            elif mfi > 75:
                put_score += 4
                signal_reasons.append("MFI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # 5. CCI - –ö–∞–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–≤–µ—Å 6)
            total_weight += 6
            if cci < -150:
                call_score += 6
                signal_reasons.append("CCI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif cci < -100:
                call_score += 4
                signal_reasons.append("CCI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif cci > 150:
                put_score += 6
                signal_reasons.append("CCI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
            elif cci > 100:
                put_score += 4
                signal_reasons.append("CCI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # 6. Ultimate Oscillator - –°–æ—Å—Ç–∞–≤–Ω–æ–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä (–≤–µ—Å 5)
            total_weight += 5
            if ultimate_oscillator < 25:
                call_score += 5
                signal_reasons.append("UO –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
            elif ultimate_oscillator > 75:
                put_score += 5
                signal_reasons.append("UO –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

            # 7. TSI - –ò—Å—Ç–∏–Ω–Ω–∞—è —Å–∏–ª–∞ (–≤–µ—Å 5)
            total_weight += 5
            if tsi < -20:
                call_score += 5
                signal_reasons.append("TSI –º–µ–¥–≤–µ–∂–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º")
            elif tsi > 20:
                put_score += 5
                signal_reasons.append("TSI –±—ã—á–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º")

            # 8. Aroon Oscillator - –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–≤–µ—Å 4)
            total_weight += 4
            if aroon_oscillator > 70:
                call_score += 4
                signal_reasons.append("Aroon —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            elif aroon_oscillator < -70:
                put_score += 4
                signal_reasons.append("Aroon —Å–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")

            # 9. MACD - –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–≤–µ—Å 4)
            total_weight += 4
            macd_diff = macd - macd_signal
            if macd > macd_signal and macd_diff > 0.0001:
                if macd > 0:
                    call_score += 4
                    signal_reasons.append("MACD —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π")
                else:
                    call_score += 2
                    signal_reasons.append("MACD —Å–ª–∞–±—ã–π –±—ã—á–∏–π")
            elif macd < macd_signal and abs(macd_diff) > 0.0001:
                if macd < 0:
                    put_score += 4
                    signal_reasons.append("MACD —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π")
                else:
                    put_score += 2
                    signal_reasons.append("MACD —Å–ª–∞–±—ã–π –º–µ–¥–≤–µ–∂–∏–π")

            # 10. ROC - –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤–µ—Å 3)
            total_weight += 3
            if roc > 2:
                call_score += 3
                signal_reasons.append("ROC —Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
            elif roc < -2:
                put_score += 3
                signal_reasons.append("ROC —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")

            # 11. Bollinger Bands - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≤–µ—Å 6)
            total_weight += 6
            if bb_position < 0.1:
                call_score += 6
                signal_reasons.append("BB —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑")
            elif bb_position < 0.25:
                call_score += 4
                signal_reasons.append("BB –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")
            elif bb_position > 0.9:
                put_score += 6
                signal_reasons.append("BB —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤–µ—Ä—Ö")
            elif bb_position > 0.75:
                put_score += 4
                signal_reasons.append("BB –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")

            # 12. Keltner Channel - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≤–µ—Å 4)
            total_weight += 4
            if kc_position < 0.15:
                call_score += 4
                signal_reasons.append("KC –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")
            elif kc_position > 0.85:
                put_score += 4
                signal_reasons.append("KC –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")

            # 13. Parabolic SAR - –¢—Ä–µ–Ω–¥ –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã (–≤–µ—Å 3)
            total_weight += 3
            psar_diff = abs(current_price - psar) / current_price
            if current_price > psar and psar_diff > 0.001:
                call_score += 3
                signal_reasons.append("PSAR –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥")
            elif current_price < psar and psar_diff > 0.001:
                put_score += 3
                signal_reasons.append("PSAR –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")

            # 14. Ichimoku Cloud - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–≤–µ—Å 5)
            total_weight += 5
            if ichimoku_position == 1:
                call_score += 5
                signal_reasons.append("Ichimoku –≤—ã—à–µ –æ–±–ª–∞–∫–∞")
            elif ichimoku_position == -1:
                put_score += 5
                signal_reasons.append("Ichimoku –Ω–∏–∂–µ –æ–±–ª–∞–∫–∞")

            # 15. ADX - –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (–≤–µ—Å 3)
            total_weight += 3
            if adx > 35:
                # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - —É—Å–∏–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª
                if call_score > put_score:
                    call_score += 3
                    signal_reasons.append("ADX —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥")
                elif put_score > call_score:
                    put_score += 3
                    signal_reasons.append("ADX —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥")

            # 16. VWAP - –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–≤–µ—Å 2)
            total_weight += 2
            vwap_diff = (current_price - vwap) / vwap
            if vwap_diff > 0.005:
                call_score += 2
                signal_reasons.append("—Ü–µ–Ω–∞ –≤—ã—à–µ VWAP")
            elif vwap_diff < -0.005:
                put_score += 2
                signal_reasons.append("—Ü–µ–Ω–∞ –Ω–∏–∂–µ VWAP")

            # 17. –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ - –ë–∞–∑–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ (–≤–µ—Å 4)
            total_weight += 4
            ma_signals = 0
            if current_price > sma_20:
                ma_signals += 1
            if current_price > sma_50:
                ma_signals += 1
            if ema_12 > ema_26:
                ma_signals += 1
            if sma_20 > sma_50:
                ma_signals += 1
            
            if ma_signals >= 3:
                call_score += 4
                signal_reasons.append("MA –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            elif ma_signals <= 1:
                put_score += 4
                signal_reasons.append("MA –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")

            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if total_weight == 0:
                total_weight = 1  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—á–µ—Ç –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–º—É –≤–µ—Å—É
            call_percentage = (call_score / total_weight) * 100
            put_percentage = (put_score / total_weight) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
            signal_strength = max(call_percentage, put_percentage)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞
            score_difference = abs(call_score - put_score)
            percentage_difference = abs(call_percentage - put_percentage)
            
            if percentage_difference < 5:  # –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                signal_type = "–ñ–î–ê–¢–¨"
                confidence = max(2, min(4, int(signal_strength / 10)))
            elif call_score > put_score:
                signal_type = "CALL"
                # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if signal_strength > 50:
                    confidence = min(10, 7 + int(percentage_difference / 10))
                elif signal_strength > 30:
                    confidence = min(8, 5 + int(percentage_difference / 15))
                else:
                    confidence = min(6, 3 + int(percentage_difference / 20))
            elif put_score > call_score:
                signal_type = "PUT"
                if signal_strength > 50:
                    confidence = min(10, 7 + int(percentage_difference / 10))
                elif signal_strength > 30:
                    confidence = min(8, 5 + int(percentage_difference / 15))
                else:
                    confidence = min(6, 3 + int(percentage_difference / 20))
            else:
                signal_type = "–ñ–î–ê–¢–¨"
                confidence = 3

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            if len(signal_reasons) > 10 and percentage_difference < 15:
                confidence = max(2, confidence - 2)
                signal_reasons.append("–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            
            # –£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            extreme_count = 0
            if rsi < 20 or rsi > 80:
                extreme_count += 1
            if stoch_k < 15 or stoch_k > 85:
                extreme_count += 1
            if williams_r < -85 or williams_r > -15:
                extreme_count += 1
            if mfi < 15 or mfi > 85:
                extreme_count += 1
            
            if extreme_count >= 3:
                confidence = min(10, confidence + 2)
                signal_reasons.append("—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            trend_agreement = 0
            if (ichimoku_position == 1 and aroon_oscillator > 50 and 
                current_price > sma_20 and ema_12 > ema_26):
                trend_agreement = 1  # –ë—ã—á–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            elif (ichimoku_position == -1 and aroon_oscillator < -50 and 
                  current_price < sma_20 and ema_12 < ema_26):
                trend_agreement = -1  # –ú–µ–¥–≤–µ–∂–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å
                
            if trend_agreement != 0:
                confidence = min(10, confidence + 1)
                if trend_agreement == 1:
                    signal_reasons.append("–±—ã—á–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å")
                else:
                    signal_reasons.append("–º–µ–¥–≤–µ–∂–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é
            if timeframe in ['1m', '3m']:
                expiration = "2"
            elif timeframe in ['5m', '15m']:
                expiration = "3"
            else:
                expiration = "5"

            # –ë–µ—Ä–µ–º –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
            main_reasons = signal_reasons[:2] if signal_reasons else ["—Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"]
            reason = ", ".join(main_reasons)

            return f"""üéØ –°–ò–ì–ù–ê–õ: {signal_type}
üìä –£–í–ï–†–ï–ù–ù–û–°–¢–¨: {confidence}/10
‚è∞ –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: {expiration} –º–∏–Ω
üí° –ü–†–ò–ß–ò–ù–ê: {reason}

üìà CALL: {call_score} –±–∞–ª–ª–æ–≤ ({call_percentage:.1f}%)
üìâ PUT: {put_score} –±–∞–ª–ª–æ–≤ ({put_percentage:.1f}%)
üîç –ê–ù–ê–õ–ò–ó: {len(signal_reasons)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {total_weight} –≤–æ–∑–º–æ–∂–Ω—ã—Ö"""

        except Exception as e:
            return f"""üéØ –°–ò–ì–ù–ê–õ: –ñ–î–ê–¢–¨
üìä –£–í–ï–†–ï–ù–ù–û–°–¢–¨: 3/10
‚è∞ –≠–ö–°–ü–ò–†–ê–¶–ò–Ø: 3 –º–∏–Ω
üí° –ü–†–ò–ß–ò–ù–ê: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""

def render_signal_card(analysis_text: str, pair: str, current_price: float):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å—Ç–∏–ª–µ Telegram"""

    # –ü–∞—Ä—Å–∏–º –∞–Ω–∞–ª–∏–∑
    lines = analysis_text.strip().split('\n')
    signal = "–ñ–î–ê–¢–¨"
    confidence = "5"
    expiration = "3"
    reason = "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"

    for line in lines:
        if "–°–ò–ì–ù–ê–õ:" in line:
            signal = line.split(":")[-1].strip()
        elif "–£–í–ï–†–ï–ù–ù–û–°–¢–¨:" in line:
            confidence = line.split(":")[1].strip().split("/")[0].strip()
        elif "–≠–ö–°–ü–ò–†–ê–¶–ò–Ø:" in line:
            expiration = line.split(":")[1].strip().split()[0].strip()
        elif "–ü–†–ò–ß–ò–ù–ê:" in line:
            reason = line.split(":", 1)[1].strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–∫–∏
    if "CALL" in signal:
        card_class = "signal-call"
        emoji = "üìà"
        action = "–ü–û–ö–£–ü–ö–ê"
        color = "#4CAF50"
    elif "PUT" in signal:
        card_class = "signal-put"
        emoji = "üìâ"
        action = "–ü–†–û–î–ê–ñ–ê"
        color = "#f44336"
    else:
        card_class = "signal-wait"
        emoji = "‚è≥"
        action = "–û–ñ–ò–î–ê–ù–ò–ï"
        color = "#ff9800"

    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    conf_value = min(max(int(confidence), 1), 10)
    indicator_position = (conf_value - 1) * 10  # 0-90%

    st.markdown(f"""
    <div class="signal-card {card_class} slide-in">
        <div class="icon-large">{emoji}</div>
        <h2 style="color: {color}; margin: 0.5rem 0; font-size: 1.8rem;">{action}</h2>
        <div style="font-size: 1.1rem; color: rgba(255,255,255,0.9); margin: 0.5rem 0;">
            <strong>{pair}</strong> ‚Ä¢ {current_price:.5f}
        </div>
        <div style="margin: 1rem 0;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                <span>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                <span style="color: {color}; font-weight: 600;">{confidence}/10</span>
            </div>
            <div class="confidence-bar">
                <div class="confidence-indicator" style="left: {indicator_position}%;"></div>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; margin: 1rem 0; font-size: 0.9rem;">
            <div>‚è∞ {expiration} –º–∏–Ω</div>
            <div>üïê {moscow_time.strftime('%H:%M:%S')}</div>
        </div>
        <div style="background: rgba(0,0,0,0.2); border-radius: 10px; padding: 0.8rem; margin-top: 1rem;">
            <div style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">
                üí° {reason}
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def render_metrics(indicators: Dict[str, Any]):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç–∏–ª–µ Telegram"""

    rsi = indicators.get('rsi', 50)
    macd = indicators.get('macd', 0)
    bb_position = indicators.get('bb_position', 0.5)
    price_change = indicators.get('price_change', 0)
    
    # –í—Å–µ –Ω–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    mfi = indicators.get('mfi', 50)
    cci = indicators.get('cci', 0)
    adx = indicators.get('adx', 25)
    stoch_k = indicators.get('stoch_k', 50)
    ultimate_oscillator = indicators.get('ultimate_oscillator', 50)
    aroon_oscillator = indicators.get('aroon_oscillator', 0)
    tsi = indicators.get('tsi', 0)
    roc = indicators.get('roc', 0)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    rsi_status = "üî¥" if rsi > 75 else "üü¢" if rsi < 25 else "üü°"
    macd_status = "üìà" if macd > 0 else "üìâ"
    bb_status = "üî¥" if bb_position > 0.8 else "üü¢" if bb_position < 0.2 else "üü°"
    price_status = "positive" if price_change > 0 else "negative"
    
    # –°—Ç–∞—Ç—É—Å—ã –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    mfi_status = "üî¥" if mfi > 85 else "üü¢" if mfi < 15 else "üü°"
    cci_status = "üî¥" if cci > 150 else "üü¢" if cci < -150 else "üü°"
    adx_status = "üí™" if adx > 35 else "üò¥"
    stoch_status = "üî¥" if stoch_k > 85 else "üü¢" if stoch_k < 15 else "üü°"
    uo_status = "üî¥" if ultimate_oscillator > 75 else "üü¢" if ultimate_oscillator < 25 else "üü°"
    aroon_status = "üìà" if aroon_oscillator > 70 else "üìâ" if aroon_oscillator < -70 else "üü°"
    tsi_status = "üìà" if tsi > 20 else "üìâ" if tsi < -20 else "üü°"
    roc_status = "üìà" if roc > 2 else "üìâ" if roc < -2 else "üü°"

    st.markdown(f"""
    <div class="metric-container">
        <div class="metric-card">
            <div class="metric-label">RSI (14)</div>
            <div class="metric-value">{rsi:.1f} {rsi_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">MFI</div>
            <div class="metric-value">{mfi:.1f} {mfi_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">CCI</div>
            <div class="metric-value">{cci:.0f} {cci_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Stochastic</div>
            <div class="metric-value">{stoch_k:.1f} {stoch_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Ultimate Osc</div>
            <div class="metric-value">{ultimate_oscillator:.1f} {uo_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Aroon Osc</div>
            <div class="metric-value">{aroon_oscillator:.0f} {aroon_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">TSI</div>
            <div class="metric-value">{tsi:.1f} {tsi_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">ROC</div>
            <div class="metric-value">{roc:.1f}% {roc_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">ADX (–°–∏–ª–∞)</div>
            <div class="metric-value">{adx:.1f} {adx_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">BB –ü–æ–∑–∏—Ü–∏—è</div>
            <div class="metric-value">{bb_position:.0%} {bb_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">MACD</div>
            <div class="metric-value">{macd:.4f} {macd_status}</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">–ò–∑–º–µ–Ω–µ–Ω–∏–µ</div>
            <div class="metric-value metric-change {price_status}">{price_change:+.2f}%</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def render_analysis_explanation(indicators: Dict[str, Any], analysis_text: str, pair: str):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å –í–°–ï–ú–ò 15+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    rsi = indicators.get('rsi', 50)
    macd = indicators.get('macd', 0)
    macd_signal = indicators.get('macd_signal', 0)
    bb_position = indicators.get('bb_position', 0.5)
    current_price = indicators.get('current_price', 0)
    sma_20 = indicators.get('sma_20', 0)
    sma_50 = indicators.get('sma_50', 0)
    ema_12 = indicators.get('ema_12', 0)
    ema_26 = indicators.get('ema_26', 0)
    stoch_k = indicators.get('stoch_k', 50)
    stoch_d = indicators.get('stoch_d', 50)
    williams_r = indicators.get('williams_r', -50)
    atr = indicators.get('atr', 0)
    
    # –ù–û–í–´–ï –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
    mfi = indicators.get('mfi', 50)
    cci = indicators.get('cci', 0)
    adx = indicators.get('adx', 25)
    psar = indicators.get('psar', current_price)
    ultimate_oscillator = indicators.get('ultimate_oscillator', 50)
    aroon_up = indicators.get('aroon_up', 50)
    aroon_down = indicators.get('aroon_down', 50)
    aroon_oscillator = indicators.get('aroon_oscillator', 0)
    kc_position = indicators.get('kc_position', 0.5)
    kc_upper = indicators.get('kc_upper', 0)
    kc_middle = indicators.get('kc_middle', 0)
    kc_lower = indicators.get('kc_lower', 0)
    tsi = indicators.get('tsi', 0)
    vwap = indicators.get('vwap', current_price)
    roc = indicators.get('roc', 0)
    ichimoku_position = indicators.get('ichimoku_position', 0)
    ichimoku_a = indicators.get('ichimoku_a', current_price)
    ichimoku_b = indicators.get('ichimoku_b', current_price)

    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• 15+ –ò–ù–î–ò–ö–ê–¢–û–†–û–í
    call_indicators = []
    put_indicators = []
    neutral_indicators = []

    # 1. RSI –∞–Ω–∞–ª–∏–∑
    if rsi < 25:
        call_indicators.append("RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif rsi < 35:
        call_indicators.append("RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif rsi > 75:
        put_indicators.append("RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    elif rsi > 65:
        put_indicators.append("RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    else:
        neutral_indicators.append("RSI –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")

    # 2. MFI –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if mfi < 15:
        call_indicators.append("MFI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif mfi < 25:
        call_indicators.append("MFI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif mfi > 85:
        put_indicators.append("MFI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    elif mfi > 75:
        put_indicators.append("MFI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    else:
        neutral_indicators.append("MFI –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")

    # 3. CCI –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if cci < -150:
        call_indicators.append("CCI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif cci < -100:
        call_indicators.append("CCI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif cci > 150:
        put_indicators.append("CCI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    elif cci > 100:
        put_indicators.append("CCI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    else:
        neutral_indicators.append("CCI –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")

    # 4. Ultimate Oscillator –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if ultimate_oscillator < 25:
        call_indicators.append("Ultimate Oscillator –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif ultimate_oscillator > 75:
        put_indicators.append("Ultimate Oscillator –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    else:
        neutral_indicators.append("Ultimate Oscillator –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω")

    # 5. TSI –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if tsi < -20:
        call_indicators.append("TSI –º–µ–¥–≤–µ–∂–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º")
    elif tsi > 20:
        put_indicators.append("TSI –±—ã—á–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º")
    else:
        neutral_indicators.append("TSI –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")

    # 6. Aroon Oscillator –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if aroon_oscillator > 70:
        call_indicators.append("Aroon —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
    elif aroon_oscillator < -70:
        put_indicators.append("Aroon —Å–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
    elif aroon_oscillator > 30:
        call_indicators.append("Aroon —Å–ª–∞–±—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
    elif aroon_oscillator < -30:
        put_indicators.append("Aroon —Å–ª–∞–±—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
    else:
        neutral_indicators.append("Aroon –±–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥")

    # 7. ROC –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if roc > 2:
        call_indicators.append("ROC —Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
    elif roc > 0.5:
        call_indicators.append("ROC —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç")
    elif roc < -2:
        put_indicators.append("ROC —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")
    elif roc < -0.5:
        put_indicators.append("ROC —É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")
    else:
        neutral_indicators.append("ROC —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")

    # 8. ADX –∞–Ω–∞–ª–∏–∑ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (–ù–û–í–´–ô)
    if adx > 35:
        if call_indicators and len(call_indicators) > len(put_indicators):
            call_indicators.append("ADX –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif put_indicators and len(put_indicators) > len(call_indicators):
            put_indicators.append("ADX –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        else:
            neutral_indicators.append("ADX –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥")
    elif adx > 25:
        neutral_indicators.append("ADX —É–º–µ—Ä–µ–Ω–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞")
    else:
        neutral_indicators.append("ADX —Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥")

    # 9. Parabolic SAR –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    psar_diff = abs(current_price - psar) / current_price
    if current_price > psar and psar_diff > 0.001:
        call_indicators.append("PSAR –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥")
    elif current_price < psar and psar_diff > 0.001:
        put_indicators.append("PSAR –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")
    else:
        neutral_indicators.append("PSAR –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")

    # 10. Ichimoku Cloud –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if ichimoku_position == 1:
        call_indicators.append("Ichimoku –≤—ã—à–µ –æ–±–ª–∞–∫–∞")
    elif ichimoku_position == -1:
        put_indicators.append("Ichimoku –Ω–∏–∂–µ –æ–±–ª–∞–∫–∞")
    else:
        neutral_indicators.append("Ichimoku –≤ –æ–±–ª–∞–∫–µ")

    # 11. VWAP –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    vwap_diff = (current_price - vwap) / vwap
    if vwap_diff > 0.01:
        call_indicators.append("VWAP —Ü–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ")
    elif vwap_diff > 0.003:
        call_indicators.append("VWAP —Ü–µ–Ω–∞ –≤—ã—à–µ")
    elif vwap_diff < -0.01:
        put_indicators.append("VWAP —Ü–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ")
    elif vwap_diff < -0.003:
        put_indicators.append("VWAP —Ü–µ–Ω–∞ –Ω–∏–∂–µ")
    else:
        neutral_indicators.append("VWAP —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ")

    # 12. Keltner Channel –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    if kc_position < 0.15:
        call_indicators.append("Keltner Channel –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")
    elif kc_position > 0.85:
        put_indicators.append("Keltner Channel –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")
    elif kc_position < 0.35:
        call_indicators.append("Keltner Channel –Ω–∏–∂–Ω—è—è —Ç—Ä–µ—Ç—å")
    elif kc_position > 0.65:
        put_indicators.append("Keltner Channel –≤–µ—Ä—Ö–Ω—è—è —Ç—Ä–µ—Ç—å")
    else:
        neutral_indicators.append("Keltner Channel —Å—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞")

    # 13. MACD –∞–Ω–∞–ª–∏–∑ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    macd_diff = macd - macd_signal
    if macd > macd_signal and macd_diff > 0.0001:
        if macd > 0:
            call_indicators.append("MACD —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
        else:
            call_indicators.append("MACD —Å–ª–∞–±—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
    elif macd < macd_signal and abs(macd_diff) > 0.0001:
        if macd < 0:
            put_indicators.append("MACD —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
        else:
            put_indicators.append("MACD —Å–ª–∞–±—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
    else:
        neutral_indicators.append("MACD –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª")

    # 14. Bollinger Bands –∞–Ω–∞–ª–∏–∑ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    if bb_position < 0.1:
        call_indicators.append("Bollinger Bands —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑")
    elif bb_position < 0.25:
        call_indicators.append("Bollinger Bands –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")
    elif bb_position > 0.9:
        put_indicators.append("Bollinger Bands —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤–µ—Ä—Ö")
    elif bb_position > 0.75:
        put_indicators.append("Bollinger Bands –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞")
    else:
        neutral_indicators.append("Bollinger Bands —Å—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞")

    # 15. Stochastic –∞–Ω–∞–ª–∏–∑ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    if stoch_k < 15 and stoch_d < 15:
        call_indicators.append("Stochastic —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif stoch_k < 25:
        call_indicators.append("Stochastic –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif stoch_k > 85 and stoch_d > 85:
        put_indicators.append("Stochastic —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    elif stoch_k > 75:
        put_indicators.append("Stochastic –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    else:
        neutral_indicators.append("Stochastic –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")

    # 16. Williams %R –∞–Ω–∞–ª–∏–∑ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    if williams_r < -85:
        call_indicators.append("Williams %R —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif williams_r < -75:
        call_indicators.append("Williams %R –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif williams_r > -15:
        put_indicators.append("Williams %R —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    elif williams_r > -25:
        put_indicators.append("Williams %R –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
    else:
        neutral_indicators.append("Williams %R –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")

    # 17. –ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
    ma_signals = 0
    ma_explanations = []
    
    if current_price > sma_20:
        ma_signals += 1
        ma_explanations.append("—Ü–µ–Ω–∞ –≤—ã—à–µ SMA20")
    else:
        ma_explanations.append("—Ü–µ–Ω–∞ –Ω–∏–∂–µ SMA20")
        
    if current_price > sma_50:
        ma_signals += 1
        ma_explanations.append("—Ü–µ–Ω–∞ –≤—ã—à–µ SMA50")
    else:
        ma_explanations.append("—Ü–µ–Ω–∞ –Ω–∏–∂–µ SMA50")
        
    if ema_12 > ema_26:
        ma_signals += 1
        ma_explanations.append("EMA12 –≤—ã—à–µ EMA26")
    else:
        ma_explanations.append("EMA12 –Ω–∏–∂–µ EMA26")
        
    if sma_20 > sma_50:
        ma_signals += 1
        ma_explanations.append("SMA20 –≤—ã—à–µ SMA50")
    else:
        ma_explanations.append("SMA20 –Ω–∏–∂–µ SMA50")
    
    if ma_signals >= 3:
        call_indicators.append(f"–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ({ma_signals}/4)")
    elif ma_signals <= 1:
        put_indicators.append(f"–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ({ma_signals}/4)")
    else:
        neutral_indicators.append(f"–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ({ma_signals}/4)")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å–∏–≥–Ω–∞–ª –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    signal_from_analysis = "–ñ–î–ê–¢–¨"
    if "CALL" in analysis_text:
        signal_from_analysis = "CALL"
        signal_color = "#4CAF50"
        signal_icon = "üìà"
        confirming_count = len(call_indicators)
        confirming_list = call_indicators
    elif "PUT" in analysis_text:
        signal_from_analysis = "PUT"
        signal_color = "#f44336"
        signal_icon = "üìâ"
        confirming_count = len(put_indicators)
        confirming_list = put_indicators
    else:
        signal_color = "#ff9800"
        signal_icon = "‚è≥"
        confirming_count = len(neutral_indicators)
        confirming_list = neutral_indicators

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
    total_indicators = len(call_indicators) + len(put_indicators) + len(neutral_indicators)
    signal_strength = "–°–ª–∞–±—ã–π"
    if confirming_count >= 4:
        signal_strength = "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif confirming_count >= 3:
        signal_strength = "–°–∏–ª—å–Ω—ã–π"
    elif confirming_count >= 2:
        signal_strength = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"

    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    st.markdown(f"""
    <div style="background: linear-gradient(145deg, #1a2332, #2d3748); border-radius: 15px; padding: 1.5rem; margin: 1rem 0;">
        <h4 style="color: {signal_color}; margin-bottom: 1rem; text-align: center;">
            {signal_icon} –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {signal_from_analysis}
        </h4>
        <div style="background: rgba(0,0,0,0.3); border-radius: 10px; padding: 1rem; margin-top: 1rem;">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; text-align: center;">
                <div>
                    <div style="color: #4CAF50; font-weight: 600; font-size: 1.2rem;">üìà {len(call_indicators)}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ó–∞ CALL</div>
                </div>
                <div>
                    <div style="color: #f44336; font-weight: 600; font-size: 1.2rem;">üìâ {len(put_indicators)}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ó–∞ PUT</div>
                </div>
                <div>
                    <div style="color: #ff9800; font-weight: 600; font-size: 1.2rem;">‚ö™ {len(neutral_indicators)}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö</div>
                </div>
                <div>
                    <div style="color: {signal_color}; font-weight: 600; font-size: 1.2rem;">üí™ {signal_strength}</div>
                    <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞</div>
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    st.markdown("### üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    col1, col2, col3 = st.columns(3)

    with col1:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è CALL –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(145deg, #1a2e1a, #2d4a2d); 
                border-radius: 15px; 
                padding: 1.5rem; 
                border: 2px solid #4CAF50;
                margin-bottom: 1rem;
                box-shadow: 0 4px 15px rgba(76, 175, 80, 0.2);
            ">
                <div style="text-align: center; margin-bottom: 1rem;">
                    <h4 style="color: #4CAF50; margin: 0; font-size: 1.2rem;">
                        üìà –ó–∞ CALL
                    </h4>
                    <div style="
                        background: #4CAF50; 
                        color: white; 
                        border-radius: 20px; 
                        padding: 0.3rem 0.8rem; 
                        display: inline-block; 
                        margin-top: 0.5rem;
                        font-weight: 600;
                    ">
                        %d –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    </div>
                </div>
            </div>
            """ % len(call_indicators), unsafe_allow_html=True)

            if call_indicators:
                for i, indicator in enumerate(call_indicators):
                    st.success(f"‚úÖ {indicator}")
            else:
                st.error("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")

    with col2:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è PUT –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(145deg, #2e1a1a, #4a2d2d); 
                border-radius: 15px; 
                padding: 1.5rem; 
                border: 2px solid #f44336;
                margin-bottom: 1rem;
                box-shadow: 0 4px 15px rgba(244, 67, 54, 0.2);
            ">
                <div style="text-align: center; margin-bottom: 1rem;">
                    <h4 style="color: #f44336; margin: 0; font-size: 1.2rem;">
                        üìâ –ó–∞ PUT
                    </h4>
                    <div style="
                        background: #f44336; 
                        color: white; 
                        border-radius: 20px; 
                        padding: 0.3rem 0.8rem; 
                        display: inline-block; 
                        margin-top: 0.5rem;
                        font-weight: 600;
                    ">
                        %d –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    </div>
                </div>
            </div>
            """ % len(put_indicators), unsafe_allow_html=True)

            if put_indicators:
                for indicator in put_indicators:
                    st.error(f"‚úÖ {indicator}")
            else:
                st.info("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")

    with col3:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        with st.container():
            st.markdown("""
            <div style="
                background: linear-gradient(145deg, #2e2a1a, #4a452d); 
                border-radius: 15px; 
                padding: 1.5rem; 
                border: 2px solid #ff9800;
                margin-bottom: 1rem;
                box-shadow: 0 4px 15px rgba(255, 152, 0, 0.2);
            ">
                <div style="text-align: center; margin-bottom: 1rem;">
                    <h4 style="color: #ff9800; margin: 0; font-size: 1.2rem;">
                        ‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
                    </h4>
                    <div style="
                        background: #ff9800; 
                        color: white; 
                        border-radius: 20px; 
                        padding: 0.3rem 0.8rem; 
                        display: inline-block; 
                        margin-top: 0.5rem;
                        font-weight: 600;
                    ">
                        %d –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    </div>
                </div>
            </div>
            """ % len(neutral_indicators), unsafe_allow_html=True)

            if neutral_indicators:
                for indicator in neutral_indicators:
                    st.warning(f"‚ö†Ô∏è {indicator}")
            else:
                st.success("‚úÖ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è
    st.markdown("---")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ
    total_indicators = len(call_indicators) + len(put_indicators) + len(neutral_indicators)

    st.markdown("""
    <div style="
        background: linear-gradient(145deg, #1e1e2e, #2a2a3e); 
        border-radius: 15px; 
        padding: 1.5rem; 
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    ">
        <h4 style="color: white; text-align: center; margin-bottom: 1rem;">
            üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        </h4>
        <div style="display: flex; justify-content: space-around; text-align: center;">
            <div>
                <div style="color: #4CAF50; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ë—ã—á—å–∏—Ö</div>
            </div>
            <div>
                <div style="color: #f44336; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ú–µ–¥–≤–µ–∂—å–∏—Ö</div>
            </div>
            <div>
                <div style="color: #ff9800; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö</div>
            </div>
            <div>
                <div style="color: #667eea; font-size: 2rem; font-weight: bold;">%d</div>
                <div style="color: rgba(255,255,255,0.8); font-size: 0.9rem;">–í—Å–µ–≥–æ</div>
            </div>
        </div>
    </div>
    """ % (len(call_indicators), len(put_indicators), len(neutral_indicators), total_indicators), unsafe_allow_html=True)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ Streamlit –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

    # RSI –∞–Ω–∞–ª–∏–∑
    if rsi < 30:
        rsi_status = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - —Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ"
        rsi_interpretation = f"RSI {rsi:.1f} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (< 30). –ê–∫—Ç–∏–≤ –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç—É –≤–≤–µ—Ä—Ö."
        rsi_strength = "–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª"
    elif rsi > 70:
        rsi_status = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - —Å–∏–≥–Ω–∞–ª –∫ –ø—Ä–æ–¥–∞–∂–µ"
        rsi_interpretation = f"RSI {rsi:.1f} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (> 70). –ê–∫—Ç–∏–≤ –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–Ω–∏–∑."
        rsi_strength = "–°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª"
    else:
        rsi_status = "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
        rsi_interpretation = f"RSI {rsi:.1f} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ (30-70). –¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."
        rsi_strength = "–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª"

    with st.expander("üéØ RSI (–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)", expanded=True):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {rsi:.1f}")
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {rsi_status}")
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {rsi_interpretation}")
        with col2:
            st.metric("RSI", f"{rsi:.1f}", help="0-30: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, 30-70: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ, 70-100: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ RSI
        rsi_normalized = max(0.0, min(1.0, rsi / 100))
        st.progress(rsi_normalized)
        st.caption("üìà RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –æ—Ç 0 –¥–æ 100")

    # MACD –∞–Ω–∞–ª–∏–∑
    macd_diff = macd - macd_signal
    if macd > macd_signal:
        macd_status = "üìà –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª - MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π"
        macd_interpretation = f"MACD ({macd:.5f}) –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ({macd_signal:.5f}). –ò–º–ø—É–ª—å—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–≤–µ—Ä—Ö."
        macd_trend = "–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
    else:
        macd_status = "üìâ –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª - MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π"
        macd_interpretation = f"MACD ({macd:.5f}) –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ ({macd_signal:.5f}). –ò–º–ø—É–ª—å—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω–∏–∑."
        macd_trend = "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"

    with st.expander("üìä MACD (–°—Ö–æ–∂–¥–µ–Ω–∏–µ-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ)", expanded=True):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("MACD", f"{macd:.5f}", f"{macd_diff:+.5f}")
        with col2:
            st.metric("–°–∏–≥–Ω–∞–ª—å–Ω–∞—è", f"{macd_signal:.5f}")
        with col3:
            st.write(f"**–¢—Ä–µ–Ω–¥:** {macd_trend}")

        st.write(f"**–°—Ç–∞—Ç—É—Å:** {macd_status}")
        st.write(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {macd_interpretation}")
        st.caption("üí° MACD –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º–ø—É–ª—å—Å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞")

    # Bollinger Bands –∞–Ω–∞–ª–∏–∑
    if bb_position < 0.2:
        bb_status = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö"
        bb_interpretation = f"–¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–∏—Ö {bb_position:.0%} –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å–∫–æ–∫–∞ –≤–≤–µ—Ä—Ö."
        bb_signal = "–ü–æ–∫—É–ø–∫–∞"
    elif bb_position > 0.8:
        bb_status = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑"
        bb_interpretation = f"–¶–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–∏—Ö {bb_position:.0%} –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑."
        bb_signal = "–ü—Ä–æ–¥–∞–∂–∞"
    else:
        bb_status = "üü° –¶–µ–Ω–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–æ–ª–æ—Å"
        bb_interpretation = f"–¶–µ–Ω–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –ø–æ–ª–æ—Å ({bb_position:.0%}). –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."
        bb_signal = "–û–∂–∏–¥–∞–Ω–∏–µ"

    with st.expander("üé≠ Bollinger Bands (–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)", expanded=True):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–ü–æ–∑–∏—Ü–∏—è –≤ –ø–æ–ª–æ—Å–∞—Ö:** {bb_position:.0%}")
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {bb_status}")
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {bb_interpretation}")
        with col2:
            st.metric("–°–∏–≥–Ω–∞–ª", bb_signal)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ BB
        bb_normalized = max(0.0, min(1.0, bb_position))
        st.progress(bb_normalized)
        st.caption("üìä 0-20%: –ó–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, 80-100%: –ó–æ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")

    # –¢—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑
    price_vs_sma = ((current_price - sma_20) / sma_20) * 100
    if current_price > sma_20:
        trend_status = "üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        trend_interpretation = f"–¶–µ–Ω–∞ ({current_price:.5f}) –≤—ã—à–µ SMA20 ({sma_20:.5f}) –Ω–∞ {price_vs_sma:+.2f}%"
        trend_signal = "–ë—ã—á–∏–π"
    else:
        trend_status = "üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        trend_interpretation = f"–¶–µ–Ω–∞ ({current_price:.5f}) –Ω–∏–∂–µ SMA20 ({sma_20:.5f}) –Ω–∞ {price_vs_sma:+.2f}%"
        trend_signal = "–ú–µ–¥–≤–µ–∂–∏–π"

    with st.expander("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (SMA20)", expanded=True):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("–¶–µ–Ω–∞", f"{current_price:.5f}")
        with col2:
            st.metric("SMA20", f"{sma_20:.5f}", f"{price_vs_sma:+.2f}%")
        with col3:
            st.write(f"**–¢—Ä–µ–Ω–¥:** {trend_signal}")

        st.write(f"**–°—Ç–∞—Ç—É—Å:** {trend_status}")
        st.write(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {trend_interpretation}")
        st.caption("üìä SMA20 - —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥")

    # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ - –í–°–ï 15+ –ù–û–í–´–•
    st.subheader("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö 15+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

    # MFI –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üí∞ MFI (Money Flow Index) - –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫", expanded=False):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {mfi:.1f}")
            if mfi < 15:
                st.success("üü¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏")
                mfi_interpretation = f"MFI {mfi:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å. –î–µ–Ω—å–≥–∏ –ø–æ–∫–∏–¥–∞—é—Ç –∞–∫—Ç–∏–≤ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ."
            elif mfi < 25:
                st.success("üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω - —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏")
                mfi_interpretation = f"MFI {mfi:.1f} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫."
            elif mfi > 85:
                st.error("üî¥ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏")
                mfi_interpretation = f"MFI {mfi:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å. –î–µ–Ω—å–≥–∏ –≤—Ö–æ–¥—è—Ç —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ."
            elif mfi > 75:
                st.error("üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω - —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏")
                mfi_interpretation = f"MFI {mfi:.1f} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è."
            else:
                st.info("üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
                mfi_interpretation = f"MFI {mfi:.1f} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ. –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω."
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {mfi_interpretation}")
        with col2:
            st.metric("MFI", f"{mfi:.1f}", help="0-20: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, 80-100: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
        mfi_normalized = max(0.0, min(1.0, mfi / 100))
        st.progress(mfi_normalized)
        st.caption("üí∞ MFI —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—Ç–æ–∫/–æ—Ç—Ç–æ–∫ –¥–µ–Ω–µ–≥")

    # CCI –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üìä CCI (Commodity Channel Index) - –ö–∞–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å", expanded=False):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {cci:.1f}")
            if cci < -150:
                st.success("üü¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
                cci_interpretation = f"CCI {cci:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å. –¶–µ–Ω–∞ –¥–∞–ª–µ–∫–æ –æ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π."
            elif cci < -100:
                st.success("üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
                cci_interpretation = f"CCI {cci:.1f} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å."
            elif cci > 150:
                st.error("üî¥ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
                cci_interpretation = f"CCI {cci:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å."
            elif cci > 100:
                st.error("üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
                cci_interpretation = f"CCI {cci:.1f} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å."
            else:
                st.info("üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
                cci_interpretation = f"CCI {cci:.1f} –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {cci_interpretation}")
        with col2:
            st.metric("CCI", f"{cci:.1f}", help="-200 –¥–æ +200, —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –∑–∞ ¬±100")
        st.caption("üìä CCI –∏–∑–º–µ—Ä—è–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ")

    # Ultimate Oscillator –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üéØ Ultimate Oscillator - –°–æ—Å—Ç–∞–≤–Ω–æ–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä", expanded=False):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {ultimate_oscillator:.1f}")
            if ultimate_oscillator < 25:
                st.success("üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
                uo_interpretation = f"UO {ultimate_oscillator:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ç—Ä–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö."
            elif ultimate_oscillator > 75:
                st.error("üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
                uo_interpretation = f"UO {ultimate_oscillator:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ç—Ä–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö."
            else:
                st.info("üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
                uo_interpretation = f"UO {ultimate_oscillator:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å."
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {uo_interpretation}")
        with col2:
            st.metric("UO", f"{ultimate_oscillator:.1f}", help="–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç 3 –ø–µ—Ä–∏–æ–¥–∞: 7, 14, 28")
        uo_normalized = max(0.0, min(1.0, ultimate_oscillator / 100))
        st.progress(uo_normalized)
        st.caption("üéØ Ultimate Oscillator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 3 –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

    # TSI –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("‚ö° TSI (True Strength Index) - –ò—Å—Ç–∏–Ω–Ω–∞—è —Å–∏–ª–∞", expanded=False):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {tsi:.1f}")
            if tsi < -20:
                st.success("üü¢ –ú–µ–¥–≤–µ–∂–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö")
                tsi_interpretation = f"TSI {tsi:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–¥–≤–µ–∂–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º. –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."
            elif tsi > 20:
                st.error("üî¥ –ë—ã—á–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑")
                tsi_interpretation = f"TSI {tsi:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—á–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º. –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π."
            else:
                st.info("üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
                tsi_interpretation = f"TSI {tsi:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–ª—ã."
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {tsi_interpretation}")
        with col2:
            st.metric("TSI", f"{tsi:.1f}", help="–î–≤–æ–π–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞")
        st.caption("‚ö° TSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–∏–Ω–Ω—É—é —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ —Å –¥–≤–æ–π–Ω—ã–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º")

    # Aroon –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üåä Aroon Oscillator - –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", expanded=False):
        col1, col2, col3 = st.columns([2, 2, 2])
        with col1:
            st.metric("Aroon Up", f"{aroon_up:.1f}")
        with col2:
            st.metric("Aroon Down", f"{aroon_down:.1f}")
        with col3:
            st.metric("Oscillator", f"{aroon_oscillator:.1f}")
        
        if aroon_oscillator > 70:
            st.success("üü¢ –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            aroon_interpretation = f"Aroon –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥. Up={aroon_up:.1f}, Down={aroon_down:.1f}"
        elif aroon_oscillator < -70:
            st.error("üî¥ –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            aroon_interpretation = f"Aroon –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥. Up={aroon_up:.1f}, Down={aroon_down:.1f}"
        elif aroon_oscillator > 30:
            st.info("üìà –°–ª–∞–±—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            aroon_interpretation = f"Aroon –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥."
        elif aroon_oscillator < -30:
            st.info("üìâ –°–ª–∞–±—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            aroon_interpretation = f"Aroon –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥."
        else:
            st.warning("üü° –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥")
            aroon_interpretation = f"Aroon –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ."
        
        st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {aroon_interpretation}")
        st.caption("üåä Aroon –∏–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤ –∏ –º–∏–Ω–∏–º—É–º–æ–≤")

    # ROC –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üöÄ ROC (Rate of Change) - –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", expanded=False):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {roc:.2f}%")
            if roc > 2:
                st.success("üü¢ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
                roc_interpretation = f"ROC {roc:.2f}% –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã."
            elif roc > 0.5:
                st.info("üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç")
                roc_interpretation = f"ROC {roc:.2f}% –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç."
            elif roc < -2:
                st.error("üî¥ –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")
                roc_interpretation = f"ROC {roc:.2f}% –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è."
            elif roc < -0.5:
                st.warning("üìâ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")
                roc_interpretation = f"ROC {roc:.2f}% –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ."
            else:
                st.info("üü° –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
                roc_interpretation = f"ROC {roc:.2f}% –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã."
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {roc_interpretation}")
        with col2:
            st.metric("ROC", f"{roc:.2f}%", help="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö")
        st.caption("üöÄ ROC –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥")

    # ADX –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üí™ ADX (Average Directional Index) - –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞", expanded=False):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {adx:.1f}")
            if adx > 35:
                st.success("üí™ –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥")
                adx_interpretation = f"ADX {adx:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥. –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã."
            elif adx > 25:
                st.info("üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥")
                adx_interpretation = f"ADX {adx:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞."
            else:
                st.warning("üò¥ –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥")
                adx_interpretation = f"ADX {adx:.1f} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥. –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ."
            st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {adx_interpretation}")
        with col2:
            st.metric("ADX", f"{adx:.1f}", help="25+ —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥, <25 —Å–ª–∞–±—ã–π")
        adx_normalized = max(0.0, min(1.0, adx / 60))
        st.progress(adx_normalized)
        st.caption("üí™ ADX –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞")

    # Parabolic SAR –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üéØ Parabolic SAR - –°—Ç–æ–ø –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç", expanded=False):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("–¶–µ–Ω–∞", f"{current_price:.5f}")
        with col2:
            st.metric("PSAR", f"{psar:.5f}")
        with col3:
            psar_diff = abs(current_price - psar) / current_price * 100
            st.metric("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ", f"{psar_diff:.2f}%")
        
        if current_price > psar:
            st.success("üìà –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ - —Ü–µ–Ω–∞ –≤—ã—à–µ PSAR")
            psar_interpretation = f"–¶–µ–Ω–∞ {current_price:.5f} –≤—ã—à–µ PSAR {psar:.5f}. –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥."
        elif current_price < psar:
            st.error("üìâ –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ - —Ü–µ–Ω–∞ –Ω–∏–∂–µ PSAR")
            psar_interpretation = f"–¶–µ–Ω–∞ {current_price:.5f} –Ω–∏–∂–µ PSAR {psar:.5f}. –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥."
        else:
            st.info("üü° –¢–æ—á–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞")
            psar_interpretation = f"–¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ PSAR. –í–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞."
        
        st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {psar_interpretation}")
        st.caption("üéØ PSAR —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Ü–µ–Ω–æ–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞")

    # Ichimoku –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("‚òÅÔ∏è Ichimoku Cloud - –û–±–ª–∞–∫–æ –ò—à–∏–º–æ–∫—É", expanded=False):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("Senkou A", f"{ichimoku_a:.5f}")
        with col2:
            st.metric("Senkou B", f"{ichimoku_b:.5f}")
        with col3:
            if ichimoku_position == 1:
                st.success("‚òÅÔ∏è –í—ã—à–µ")
            elif ichimoku_position == -1:
                st.error("‚òÅÔ∏è –ù–∏–∂–µ")
            else:
                st.warning("‚òÅÔ∏è –í –æ–±–ª–∞–∫–µ")
        
        if ichimoku_position == 1:
            st.success("üìà –¶–µ–Ω–∞ –≤—ã—à–µ –æ–±–ª–∞–∫–∞ - —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
            ichimoku_interpretation = f"–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ –æ–±–ª–∞–∫–∞ –ò—à–∏–º–æ–∫—É. –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥."
        elif ichimoku_position == -1:
            st.error("üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ –æ–±–ª–∞–∫–∞ - —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
            ichimoku_interpretation = f"–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ –æ–±–ª–∞–∫–∞ –ò—à–∏–º–æ–∫—É. –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥."
        else:
            st.warning("‚òÅÔ∏è –¶–µ–Ω–∞ –≤ –æ–±–ª–∞–∫–µ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å")
            ichimoku_interpretation = f"–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞–∫–∞. –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥."
        
        st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {ichimoku_interpretation}")
        st.caption("‚òÅÔ∏è Ichimoku - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞")

    # VWAP –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üìä VWAP (Volume Weighted Average Price) - –û–±—ä–µ–º–Ω–∞—è —Ü–µ–Ω–∞", expanded=False):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("–¶–µ–Ω–∞", f"{current_price:.5f}")
        with col2:
            st.metric("VWAP", f"{vwap:.5f}")
        with col3:
            vwap_diff_percent = ((current_price - vwap) / vwap) * 100
            st.metric("–†–∞–∑–Ω–∏—Ü–∞", f"{vwap_diff_percent:+.2f}%")
        
        if vwap_diff_percent > 1:
            st.success("üìà –¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ VWAP")
            vwap_interpretation = f"–¶–µ–Ω–∞ –Ω–∞ {vwap_diff_percent:.2f}% –≤—ã—à–µ VWAP. –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π."
        elif vwap_diff_percent > 0.3:
            st.info("üìà –¶–µ–Ω–∞ –≤—ã—à–µ VWAP")
            vwap_interpretation = f"–¶–µ–Ω–∞ –≤—ã—à–µ VWAP. –£–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π."
        elif vwap_diff_percent < -1:
            st.error("üìâ –¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ VWAP")
            vwap_interpretation = f"–¶–µ–Ω–∞ –Ω–∞ {abs(vwap_diff_percent):.2f}% –Ω–∏–∂–µ VWAP. –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."
        elif vwap_diff_percent < -0.3:
            st.warning("üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ VWAP")
            vwap_interpretation = f"–¶–µ–Ω–∞ –Ω–∏–∂–µ VWAP. –£–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."
        else:
            st.info("üü° –¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ VWAP")
            vwap_interpretation = f"–¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ VWAP. –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫."
        
        st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {vwap_interpretation}")
        st.caption("üìä VWAP –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤")

    # Keltner Channel –∞–Ω–∞–ª–∏–∑ (–ù–û–í–´–ô)
    with st.expander("üìà Keltner Channel - –ö–∞–Ω–∞–ª –ö–µ–ª—å—Ç–Ω–µ—Ä–∞", expanded=False):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.metric("–í–µ—Ä—Ö", f"{kc_upper:.5f}")
        with col2:
            st.metric("–ù–∏–∑", f"{kc_lower:.5f}")
        with col3:
            st.metric("–ü–æ–∑–∏—Ü–∏—è", f"{kc_position:.0%}")
        
        if kc_position < 0.15:
            st.success("üìà –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ - —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏")
            kc_interpretation = f"–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Keltner Channel ({kc_position:.0%}). –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö."
        elif kc_position > 0.85:
            st.error("üìâ –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ - —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏")
            kc_interpretation = f"–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Keltner Channel ({kc_position:.0%}). –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑."
        elif kc_position < 0.35:
            st.info("üìà –ù–∏–∂–Ω—è—è —Ç—Ä–µ—Ç—å")
            kc_interpretation = f"–¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–π —Ç—Ä–µ—Ç–∏ –∫–∞–Ω–∞–ª–∞ ({kc_position:.0%})."
        elif kc_position > 0.65:
            st.warning("üìâ –í–µ—Ä—Ö–Ω—è—è —Ç—Ä–µ—Ç—å")
            kc_interpretation = f"–¶–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —Ç—Ä–µ—Ç–∏ –∫–∞–Ω–∞–ª–∞ ({kc_position:.0%})."
        else:
            st.info("üü° –°—Ä–µ–¥–Ω—è—è –∑–æ–Ω–∞")
            kc_interpretation = f"–¶–µ–Ω–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ –∫–∞–Ω–∞–ª–∞ ({kc_position:.0%})."
        
        st.write(f"**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {kc_interpretation}")
        kc_normalized = max(0.0, min(1.0, kc_position))
        st.progress(kc_normalized)
        st.caption("üìà Keltner Channel –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ ATR –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            "Stochastic %K",
            f"{stoch_k:.1f}",
            help="0-20: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, 80-100: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω"
        )
        if stoch_k < 15:
            st.success("üü¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
        elif stoch_k < 25:
            st.success("üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
        elif stoch_k > 85:
            st.error("üî¥ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
        elif stoch_k > 75:
            st.error("üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
        else:
            st.info("üü° –ù–µ–π—Ç—Ä–∞–ª–µ–Ω")

    with col2:
        st.metric(
            "Williams %R",
            f"{williams_r:.1f}",
            help="-100 –¥–æ -80: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, -20 –¥–æ 0: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω"
        )
        if williams_r < -85:
            st.success("üü¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
        elif williams_r < -75:
            st.success("üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
        elif williams_r > -15:
            st.error("üî¥ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
        elif williams_r > -25:
            st.error("üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
        else:
            st.info("üü° –ù–µ–π—Ç—Ä–∞–ª–µ–Ω")

    with col3:
        st.metric(
            "ATR (–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)",
            f"{atr:.5f}",
            help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞"
        )
        if atr > 0:
            volatility_level = "–í—ã—Å–æ–∫–∞—è" if atr > current_price * 0.01 else "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
            st.info(f"üìä {volatility_level}")

    # –ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    with st.expander("üìà –ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö", expanded=False):
        st.write("**–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö:**")
        for explanation in ma_explanations:
            if "–≤—ã—à–µ" in explanation:
                st.success(f"‚úÖ {explanation}")
            else:
                st.error(f"‚ùå {explanation}")
        
        st.write(f"**–û–±—â–∏–π —Å–∏–≥–Ω–∞–ª —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö:** {ma_signals}/4 –±—ã—á—å–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("SMA20", f"{sma_20:.5f}")
        with col2:
            st.metric("SMA50", f"{sma_50:.5f}")
        with col3:
            st.metric("EMA12", f"{ema_12:.5f}")
        with col4:
            st.metric("EMA26", f"{ema_26:.5f}")
        
        st.caption("üìà –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞")

    # –û–±—É—á–∞—é—â–∞—è —Å–µ–∫—Ü–∏—è
    st.subheader("üìö –ö–∞–∫ –ø–æ–Ω–∏–º–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã")

    with st.expander("üí° –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º", expanded=False):
        tab1, tab2, tab3 = st.tabs(["üìà CALL", "üìâ PUT", "‚è≥ –ñ–î–ê–¢–¨"])

        with tab1:
            st.write("**–ö–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç—å (CALL):**")
            st.write("‚úÖ RSI < 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
            st.write("‚úÖ MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏")
            st.write("‚úÖ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Bollinger Bands")
            st.write("‚úÖ –¶–µ–Ω–∞ –≤—ã—à–µ SMA20")
            st.write("‚úÖ Stochastic < 20")

        with tab2:
            st.write("**–ö–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–∞—Ç—å (PUT):**")
            st.write("‚ùå RSI > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
            st.write("‚ùå MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏")
            st.write("‚ùå –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Bollinger Bands")
            st.write("‚ùå –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA20")
            st.write("‚ùå Stochastic > 80")

        with tab3:
            st.write("**–ö–æ–≥–¥–∞ –∂–¥–∞—Ç—å:**")
            st.write("‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            st.write("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            st.write("‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥")
            st.write("‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–∏—Å–∫–∏
    st.warning("""
    ‚ö†Ô∏è **–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê:**

    ‚Ä¢ **–ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ 2-5%** –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
    ‚Ä¢ **–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏** —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ
    ‚Ä¢ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã** –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å
    ‚Ä¢ **–ê–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä** - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ –≤–∞–º–∏
    ‚Ä¢ **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–æ—Ä–≥—É–π—Ç–µ** —Å—É–º–º–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å
    """)

    st.info("""
    üìä **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑:**

    1. –ò–∑—É—á–∏—Ç–µ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ
    2. –ò—â–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    3. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞
    4. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º
    5. –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """)

def main():
    load_telegram_mobile_css()

    # Telegram-style header
    st.markdown("""
    <div class="telegram-header">
        <div class="app-title">üì± MAJORKA VIP</div>
        <div class="app-subtitle">ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ‚Ä¢ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã</div>
    </div>
    """, unsafe_allow_html=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = PocketOptionAnalyzer()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
    st.markdown('<div class="telegram-card">', unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        currency_pairs = [
            "EUR/USD", "GBP/USD", "USD/JPY", "AUD/USD", "USD/CAD",
            "EUR/GBP", "EUR/JPY", "GBP/JPY", "USD/CHF", "NZD/USD"
        ]
        selected_pair = st.selectbox("üìà –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞", currency_pairs, key="pair_select")

    with col2:
        timeframes = ["1m", "3m", "5m", "15m", "30m", "1h"]
        selected_timeframe = st.selectbox("‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º", timeframes, index=2, key="tf_select")

    st.markdown('</div>', unsafe_allow_html=True)

    # API –∫–ª—é—á –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
    with st.expander("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", expanded=False):
        api_key = st.text_input(
            "OpenAI API Key (–¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞)",
            value=st.session_state.get('openai_api_key', ''),
            type="password",
            help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç OpenAI"
        )

        if api_key != st.session_state.get('openai_api_key', ''):
            st.session_state.openai_api_key = api_key
            st.session_state.analyzer.gpt_api_key = api_key
            if api_key and api_key.startswith('sk-'):
                st.success("‚úÖ API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω")
            elif api_key:
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞")

    # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("üöÄ –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨", key="main_analyze"):

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        progress_bar = st.progress(0)
        status_text = st.empty()

        status_text.text("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        progress_bar.progress(25)

        market_data = st.session_state.analyzer.get_market_data(selected_pair, selected_timeframe)

        if market_data is not None and not market_data.empty:
            status_text.text("üî¢ –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
            progress_bar.progress(50)

            indicators = st.session_state.analyzer.calculate_indicators(market_data)

            if indicators:
                status_text.text("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
                progress_bar.progress(75)

                analysis = st.session_state.analyzer.analyze_with_ai(
                    market_data, indicators, selected_pair, selected_timeframe
                )

                progress_bar.progress(100)
                status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                time.sleep(1)

                # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_bar.empty()
                status_text.empty()

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                current_price = indicators.get('current_price', 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                if current_price > 0:
                    render_signal_card(analysis, selected_pair, current_price)

                    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
                    st.markdown('<div class="telegram-card">', unsafe_allow_html=True)
                    st.markdown("### üìä –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                    render_metrics(indicators)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
                    with st.expander("üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=False):
                        st.write("**–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:**")
                        for key, value in indicators.items():
                            st.write(f"{key}: {value}")
                else:
                    st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã")

                # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
                st.markdown('<div class="telegram-card">', unsafe_allow_html=True)
                st.markdown("### üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞")
                render_analysis_explanation(indicators, analysis, selected_pair)
                st.markdown('</div>', unsafe_allow_html=True)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
                with st.expander("üìà –ì—Ä–∞—Ñ–∏–∫ –∏ –¥–µ—Ç–∞–ª–∏", expanded=False):
                    chart_data = market_data[['Close']].tail(50)
                    st.line_chart(chart_data, height=300)

                    st.markdown("**üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:**")
                    recent_data = market_data[['Open', 'High', 'Low', 'Close']].tail(5)
                    st.dataframe(recent_data, use_container_width=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                if 'analysis_history' not in st.session_state:
                    st.session_state.analysis_history = []

                moscow_tz = pytz.timezone('Europe/Moscow')
                moscow_time = datetime.now(moscow_tz)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                signal_type = "–ñ–î–ê–¢–¨"
                if "CALL" in analysis:
                    signal_type = "CALL"
                elif "PUT" in analysis:
                    signal_type = "PUT"

                st.session_state.analysis_history.append({
                    'time': moscow_time,
                    'pair': selected_pair,
                    'timeframe': selected_timeframe,
                    'signal': signal_type,
                    'price': current_price,
                    'analysis': analysis
                })

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                if len(st.session_state.analysis_history) > 10:
                    st.session_state.analysis_history = st.session_state.analysis_history[-10:]

            else:
                progress_bar.empty()
                status_text.empty()
                st.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        else:
            progress_bar.empty()
            status_text.empty()
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞")

    # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
    if 'analysis_history' in st.session_state and st.session_state.analysis_history:
        st.markdown('<div class="telegram-card">', unsafe_allow_html=True)
        st.markdown("### üìö –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")

        for analysis_item in reversed(st.session_state.analysis_history[-5:]):
            signal = analysis_item['signal']
            time_str = analysis_item['time'].strftime('%H:%M')
            pair = analysis_item['pair']
            price = analysis_item['price']

            if signal == "CALL":
                icon = "üìà"
                class_name = "history-call"
            elif signal == "PUT":
                icon = "üìâ"
                class_name = "history-put"
            else:
                icon = "‚è≥"
                class_name = "history-wait"

            st.markdown(f"""
            <div class="history-item {class_name}">
                <div>
                    <strong>{icon} {signal}</strong><br>
                    <small>{pair} ‚Ä¢ {price:.5f}</small>
                </div>
                <div style="text-align: right;">
                    <small>{time_str}</small>
                </div>
            </div>
            """, unsafe_allow_html=True)

        st.markdown('</div>', unsafe_allow_html=True)

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
    with st.expander("üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", expanded=False):
        st.markdown("""
        **üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
        1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
        2. –ù–∞–∂–º–∏—Ç–µ "–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨"
        3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

        **üìä –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:**
        - üìà **CALL** - —Ü–µ–Ω–∞ –ø–æ–π–¥–µ—Ç –≤–≤–µ—Ä—Ö
        - üìâ **PUT** - —Ü–µ–Ω–∞ –ø–æ–π–¥–µ—Ç –≤–Ω–∏–∑  
        - ‚è≥ **–ñ–î–ê–¢–¨** - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å

        **‚ö†Ô∏è –í–∞–∂–Ω–æ:**
        - –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ 2-5% –¥–µ–ø–æ–∑–∏—Ç–∞
        - –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ –¥–µ–º–æ —Å—á–µ—Ç–µ
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
        """)

    # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
    st.markdown("""
    <div class="telegram-card" style="margin-top: 2rem;">
        <div style="text-align: center; color: rgba(255,255,255,0.7); font-size: 0.9rem;">
            ‚ö†Ô∏è <strong>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</strong> –¢–æ—Ä–≥–æ–≤–ª—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ –Ω–µ—Å–µ—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏.<br>
            –ê–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.
        </div>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()