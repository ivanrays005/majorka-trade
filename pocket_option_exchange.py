
import time
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from exchanges.exchange import Exchange


class PocketOptionExchange(Exchange):
    def __init__(self, username: str, password: str, account_type: str = "PRACTICE"):
        super().__init__(username, password, account_type)
        self._connected = True  # –î–µ–º–æ —Ä–µ–∂–∏–º –≤—Å–µ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω
        self._balance = 10000.0  # –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–º–æ –±–∞–ª–∞–Ω—Å
        self._trades = []  # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
        print(f"üéÆ Pocket Option –î–µ–º–æ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üí≥ –î–µ–º–æ –±–∞–ª–∞–Ω—Å: ${self._balance}")
        
    @property
    def api(self):
        """API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self

    

    def check_connect(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ"""
        return self._connected

    def retry(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ"""
        print("‚úÖ –î–µ–º–æ —Ä–µ–∂–∏–º –≤—Å–µ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        return True

    @property
    def balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ –±–∞–ª–∞–Ω—Å–∞"""
        return self._balance

    def candles_to_df(self, pair) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä–∞—Ñ–∏–∫–∞
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
        timestamps = []
        closes = []
        mins = []
        maxs = []
        volumes = []
        
        base_price = 1.2000 if "EUR" in pair else 1.0000
        
        for i in range(100):
            timestamp = int(time.time()) - (100 - i) * 60
            price_change = np.random.normal(0, 0.001)
            close = base_price + price_change
            
            high = close + abs(np.random.normal(0, 0.0005))
            low = close - abs(np.random.normal(0, 0.0005))
            volume = np.random.randint(100, 1000)
            
            timestamps.append(timestamp)
            closes.append(close)
            mins.append(low)
            maxs.append(high)
            volumes.append(volume)
            
            base_price = close
        
        return pd.DataFrame({
            "from": timestamps,
            "close": closes,
            "min": mins,
            "max": maxs,
            "volume": volumes
        })

    def buy(self, pair: str, amount: float, direction: str, duration: int = 60):
        """–î–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª—è - —Å–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        if amount > self._balance:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: ${self._balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}")
            return None
            
        order_id = f"po_demo_{int(time.time())}"
        trade_info = {
            'id': order_id,
            'pair': pair,
            'amount': amount,
            'direction': direction,
            'duration': duration,
            'open_time': time.time(),
            'status': 'active'
        }
        
        self._trades.append(trade_info)
        print(f"üéÆ –î–µ–º–æ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {pair} | {direction.upper()} | ${amount} | {duration}—Å")
        return order_id

    def check_win_v3(self, order_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–º–æ —Å–¥–µ–ª–∫–∏"""
        # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É –ø–æ ID
        trade = None
        for t in self._trades:
            if t['id'] == order_id:
                trade = t
                break
                
        if not trade:
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏
        if time.time() - trade['open_time'] < trade['duration']:
            return None  # –°–¥–µ–ª–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (70% –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–ª—è –¥–µ–º–æ)
        import random
        if random.random() < 0.7:
            payout = random.uniform(1.75, 1.95)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç—ã
            profit = trade['amount'] * payout
            self._balance += profit - trade['amount']  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            trade['status'] = 'win'
            trade['profit'] = profit - trade['amount']
            print(f"‚úÖ –í—ã–∏–≥—Ä—ã—à: +${profit - trade['amount']:.2f} | –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self._balance:.2f}")
            return payout
        else:
            self._balance -= trade['amount']  # –°–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à
            trade['status'] = 'loss'
            trade['profit'] = -trade['amount']
            print(f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: -${trade['amount']:.2f} | –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self._balance:.2f}")
            return -1

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞"""
        print("üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pocket Option –î–µ–º–æ —Ä–µ–∂–∏–º–∞...")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ü–æ–¥–∫–ª—é—á–µ–Ω' if self._connected else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        print(f"üí≥ –î–µ–º–æ –±–∞–ª–∞–Ω—Å: ${self._balance}")
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len([t for t in self._trades if t['status'] == 'active'])}")
        print("‚úÖ –î–µ–º–æ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True

    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö"""
        if hasattr(self, '_trades'):
            print(f"üéÆ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ —Å–µ—Å—Å–∏–∏. –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(self._trades)}")
        pass
