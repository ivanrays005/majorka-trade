import streamlit as st
import time
from datetime import datetime, timedelta
from bots.rf_bot import RandomForestBot
from exchanges.pocket_option_exchange import PocketOptionExchange


class PocketOptionBot(RandomForestBot):
    def __init__(self, exchange: PocketOptionExchange, pair: str, entry_value: float, 
                 stop_gain: float, stop_loss: float, expiration_time: int = 60):
        super().__init__(exchange, pair, entry_value, stop_gain, stop_loss)
        self.expiration_time = expiration_time  # –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    def wait_complete(self, order_id):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è Pocket Option"""
        start_time = time.time()

        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
            try:
                order_status = self.exchange.check_win_v3(order_id)

                if order_status is not None:
                    if order_status > 0:
                        # –í—ã–∏–≥—Ä—ã—à
                        profit = order_status
                        return self.get_profit(profit)
                    else:
                        # –ü—Ä–æ–∏–≥—Ä—ã—à
                        loss = -self.entry_value
                        return self.get_profit(loss)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if time.time() - start_time > self.expiration_time + 30:
                    st.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏")
                    return self.get_profit(-self.entry_value)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–¥–µ–ª–∫–∏: {str(e)}")
                time.sleep(1)

            time.sleep(2)

    def run(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        try:
            if not self.exchange.check_connect():
                st.warning("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pocket Option...")
                if not self.exchange.retry():
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pocket Option")
                    return
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return

        st.info(f"""
        üöÄ –ó–∞–ø—É—Å–∫ Pocket Option –±–æ—Ç–∞
        üìà –ê–∫—Ç–∏–≤: {self.pair}
        üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: ${self.entry_value}
        üìä –°—Ç–æ–ø –ª–æ—Å—Å: ${self.stop_loss}
        üìà –°—Ç–æ–ø –ø—Ä–∏–±—ã–ª—å: ${self.stop_gain}
        ‚è∞ –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {self.expiration_time} —Å–µ–∫
        """)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_container = st.empty()
        chart_container = st.empty()

        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if not self.exchange.check_connect():
                    st.warning("üîÑ –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    if not self.exchange.retry():
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                        time.sleep(10)
                        continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
                df = self.exchange.candles_to_df(pair=self.pair)

                if df.empty:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    time.sleep(5)
                    continue

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                with chart_container.container():
                    st.line_chart(df["close"])

                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
                entry_sign = self.sinal(df)

                if entry_sign:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Pocket Option
                    direction = "call" if entry_sign == "call" else "put"

                    # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
                    status, order_id = self.exchange.api.buy(
                        amount=self.entry_value,
                        active=self.pair,
                        direction=direction,
                        duration=self.expiration_time
                    )

                    if status:
                        st.success(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {direction.upper()} –Ω–∞ ${self.entry_value}")
                        self.wait_complete(order_id)
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                with stats_container.container():
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("üí∞ –ë–∞–ª–∞–Ω—Å", f"${self.exchange.balance:.2f}")
                    with col2:
                        st.metric("üìä –ü—Ä–∏–±—ã–ª—å", f"${self.lucro:.2f}")
                    with col3:
                        profit_percent = (self.lucro / abs(self.stop_loss)) * 100 if self.stop_loss != 0 else 0
                        st.metric("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", f"{profit_percent:.1f}%")

                time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
                time.sleep(10)
import streamlit as st
import time
from datetime import datetime, timedelta
from bots.rf_bot import RandomForestBot
from exchanges.pocket_option_exchange import PocketOptionExchange


class PocketOptionBot(RandomForestBot):
    def __init__(self, exchange: PocketOptionExchange, pair: str, entry_value: float, 
                 stop_gain: float, stop_loss: float, expiration_time: int = 60):
        super().__init__(exchange, pair, entry_value, stop_gain, stop_loss)
        self.expiration_time = expiration_time  # –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    def wait_complete(self, order_id):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è Pocket Option"""
        start_time = time.time()

        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
            try:
                order_status = self.exchange.check_win_v3(order_id)

                if order_status is not None:
                    if order_status > 0:
                        # –í—ã–∏–≥—Ä—ã—à
                        profit = self.entry_value * order_status
                        return self.get_profit(profit)
                    else:
                        # –ü—Ä–æ–∏–≥—Ä—ã—à
                        loss = -self.entry_value
                        return self.get_profit(loss)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if time.time() - start_time > self.expiration_time + 30:
                    st.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏")
                    return self.get_profit(-self.entry_value)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
                time.sleep(5)
                continue

            time.sleep(2)

    def run(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        try:
            if not self.exchange.check_connect():
                st.warning("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pocket Option...")
                if not self.exchange.retry():
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pocket Option")
                    return
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return

        st.info(f"""
        üöÄ –ó–∞–ø—É—Å–∫ Pocket Option –±–æ—Ç–∞
        üìà –ê–∫—Ç–∏–≤: {self.pair}
        üí∞ –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: ${self.entry_value}
        ‚è±Ô∏è –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {self.expiration_time}—Å
        üéØ Stop Gain: ${self.stop_gain}
        üõë Stop Loss: ${self.stop_loss}
        """)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = self.exchange.balance
        st.metric("üí≥ –ë–∞–ª–∞–Ω—Å", f"${balance:.2f}")

        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if not self.exchange.check_connect():
                    st.warning("üîÑ –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    if not self.exchange.retry():
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                        time.sleep(10)
                        continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
                df = self.exchange.candles_to_df(pair=self.pair)

                if df is None or df.empty:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    time.sleep(10)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
                sinal = self.sinal(df)

                if sinal != "WAIT":
                    direction = "call" if sinal == "PUT" else "put"

                    st.info(f"üéØ –°–∏–≥–Ω–∞–ª: {sinal} | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction.upper()}")

                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    order_id = self.exchange.buy(
                        pair=self.pair,
                        amount=self.entry_value,
                        direction=direction,
                        duration=self.expiration_time
                    )

                    if order_id:
                        st.success(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {order_id}")

                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        result = self.wait_complete(order_id)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–¥–µ–º–æ)
                        if result > 0:
                            self.exchange._balance += result
                        else:
                            self.exchange._balance += result

                        st.metric("üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å", f"${self.exchange.balance:.2f}")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                else:
                    st.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞...")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")

            time.sleep(2)